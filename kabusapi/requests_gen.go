// Code generated by internal/codegen; DO NOT EDIT.
package kabusapi

import (
	"context"
	"fmt"
	"net/url"
	"strconv"
)

// 市場コード
// |定義値|説明  |
// |------|------|
// |1     |東証  |
// |3     |名証  |
// |5     |福証  |
// |6     |札証  |
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type GetBoardOfParamExchange string

const (
	// |1|東証|
	GetBoardOfParamExchange東証 GetBoardOfParamExchange = "1"
	// |3|名証|
	GetBoardOfParamExchange名証 GetBoardOfParamExchange = "3"
	// |5|福証|
	GetBoardOfParamExchange福証 GetBoardOfParamExchange = "5"
	// |6|札証|
	GetBoardOfParamExchange札証 GetBoardOfParamExchange = "6"
	// |2|日通し|
	GetBoardOfParamExchange日通し GetBoardOfParamExchange = "2"
	// |23|日中|
	GetBoardOfParamExchange日中 GetBoardOfParamExchange = "23"
	// |24|夜間|
	GetBoardOfParamExchange夜間 GetBoardOfParamExchange = "24"
)

// P returns pointer of GetBoardOfParamExchange.
func (e GetBoardOfParamExchange) P() *GetBoardOfParamExchange {
	v := e
	return &v
}

// 時価情報・板情報
// 指定した銘柄の時価情報・板情報を取得します
// レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、
// 再度時価情報・板情報APIを実行してください。
func (c Client) GetBoardOf(
	ctx context.Context,
	symbol string,
	exchange GetBoardOfParamExchange,
) (BoardSuccess, error) {
	pat := fmt.Sprintf("/board/%v@%v", symbol, exchange)
	res := BoardSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 注文取消
// 注文を取消します
func (c Client) PutCancelorder(
	ctx context.Context,
	req RequestCancelOrder,
) (OrderSuccess, error) {
	pat := "/cancelorder"
	res := OrderSuccess{}
	err := c.putRequest(ctx, pat, req, &res)
	return res, err
}

// 取得する商品
// |定義値|説明   |
// |------|-------|
// |0     |すべて |
// |1     |現物   |
// |2     |信用   |
// |3     |先物   |
// |4     |OP     |
type GetOrdersQueryProduct string

const (
	// |0|すべて |
	GetOrdersQueryProductすべて GetOrdersQueryProduct = "0"
	// |1|現物|
	GetOrdersQueryProduct現物 GetOrdersQueryProduct = "1"
	// |2|信用|
	GetOrdersQueryProduct信用 GetOrdersQueryProduct = "2"
	// |3|先物|
	GetOrdersQueryProduct先物 GetOrdersQueryProduct = "3"
	// |4|OP|
	GetOrdersQueryProductOP GetOrdersQueryProduct = "4"
)

// 注文詳細抑止
// |定義値|説明                            |
// |------|--------------------------------|
// |true  |注文詳細を出力する（デフォルト）|
// |false |注文詳細の出力しない            |
type GetOrdersQueryDetails string

const (
	// |true|注文詳細を出力する（デフォルト）|
	GetOrdersQueryDetails注文詳細を出力する_デフォルト GetOrdersQueryDetails = "true"
	// |false|注文詳細の出力しない|
	GetOrdersQueryDetails注文詳細の出力しない GetOrdersQueryDetails = "false"
)

// 状態
//
// ※指定された状態と一致する注文のみレスポンスします。
// ※フィルタには数字の入力のみ受け付けます。
// ※複数の状態を指定することはできません。
// |定義値|説明                                              |
// |------|--------------------------------------------------|
// |1     |待機（発注待機）                                  |
// |2     |処理中（発注送信中）                              |
// |3     |処理済（発注済・訂正済）                          |
// |4     |訂正取消送信中                                    |
// |5     |終了（発注エラー・取消済・全約定・失効・期限切れ）|
type GetOrdersQueryState string

const (
	// |1|待機（発注待機）|
	GetOrdersQueryState待機_発注待機 GetOrdersQueryState = "1"
	// |2|処理中（発注送信中）|
	GetOrdersQueryState処理中_発注送信中 GetOrdersQueryState = "2"
	// |3|処理済（発注済・訂正済）|
	GetOrdersQueryState処理済_発注済_訂正済 GetOrdersQueryState = "3"
	// |4|訂正取消送信中|
	GetOrdersQueryState訂正取消送信中 GetOrdersQueryState = "4"
	// |5|終了（発注エラー・取消済・全約定・失効・期限切れ）|
	GetOrdersQueryState終了_発注エラー_取消済_全約定_失効_期限切れ GetOrdersQueryState = "5"
)

// 売買区分
//
// ※指定された売買区分と一致する注文のみレスポンスします。
// ※フィルタには数字の入力のみ受け付けます。
// ※複数の売買区分を指定することができません。
// |定義値|説明|
// |------|----|
// |1     |売  |
// |2     |買  |
type GetOrdersQuerySide string

const (
	// |1|売|
	GetOrdersQuerySide売 GetOrdersQuerySide = "1"
	// |2|買|
	GetOrdersQuerySide買 GetOrdersQuerySide = "2"
)

// 取引区分
//
// ※指定された取引区分と一致する注文のみレスポンスします。
// ※フィルタには数字の入力のみ受け付けます。
// ※複数の取引区分を指定することができません。
// |定義値|説明|
// |------|----|
// |2     |新規|
// |3     |返済|
//
//
type GetOrdersQueryCashmargin string

const (
	// |2|新規|
	GetOrdersQueryCashmargin新規 GetOrdersQueryCashmargin = "2"
	// |3|返済|
	GetOrdersQueryCashmargin返済 GetOrdersQueryCashmargin = "3"
)

// GetOrdersQuery is definition of GetOrdersQuery.
type GetOrdersQuery struct {
	// 取得する商品
	// |定義値|説明   |
	// |------|-------|
	// |0     |すべて |
	// |1     |現物   |
	// |2     |信用   |
	// |3     |先物   |
	// |4     |OP     |
	Product *GetOrdersQueryProduct `json:"product"`
	// 注文番号
	// ※指定された注文番号と一致する注文のみレスポンスします。
	// ※指定された注文番号との比較では大文字小文字を区別しません。
	// ※複数の注文番号を指定することはできません。
	ID *string `json:"id"`
	// 更新日時
	// ※形式：yyyyMMddHHmmss （例：20201201123456）
	// ※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。
	// ※複数の更新日時を指定することはできません。
	Updtime *string `json:"updtime"`
	// 注文詳細抑止
	// |定義値|説明                            |
	// |------|--------------------------------|
	// |true  |注文詳細を出力する（デフォルト）|
	// |false |注文詳細の出力しない            |
	Details *GetOrdersQueryDetails `json:"details"`
	// 銘柄コード
	// ※指定された銘柄コードと一致する注文のみレスポンスします。
	// ※複数の銘柄コードを指定することができません。
	Symbol *string `json:"symbol"`
	// 状態
	//
	// ※指定された状態と一致する注文のみレスポンスします。
	// ※フィルタには数字の入力のみ受け付けます。
	// ※複数の状態を指定することはできません。
	// |定義値|説明                                              |
	// |------|--------------------------------------------------|
	// |1     |待機（発注待機）                                  |
	// |2     |処理中（発注送信中）                              |
	// |3     |処理済（発注済・訂正済）                          |
	// |4     |訂正取消送信中                                    |
	// |5     |終了（発注エラー・取消済・全約定・失効・期限切れ）|
	State *GetOrdersQueryState `json:"state"`
	// 売買区分
	//
	// ※指定された売買区分と一致する注文のみレスポンスします。
	// ※フィルタには数字の入力のみ受け付けます。
	// ※複数の売買区分を指定することができません。
	// |定義値|説明|
	// |------|----|
	// |1     |売  |
	// |2     |買  |
	Side *GetOrdersQuerySide `json:"side"`
	// 取引区分
	//
	// ※指定された取引区分と一致する注文のみレスポンスします。
	// ※フィルタには数字の入力のみ受け付けます。
	// ※複数の取引区分を指定することができません。
	// |定義値|説明|
	// |------|----|
	// |2     |新規|
	// |3     |返済|
	//
	//
	Cashmargin *GetOrdersQueryCashmargin `json:"cashmargin"`
}

// 注文約定照会
// 注文一覧を取得します。
// ※下記Queryパラメータは任意設定となります。
func (c Client) GetOrders(
	ctx context.Context,
	req GetOrdersQuery,
) (OrdersSuccess, error) {
	pat := "/orders"
	res := OrdersSuccess{}
	q := url.Values{}
	if req.Product != nil {
		q.Add("product", string(*req.Product))
	}
	if req.ID != nil {
		q.Add("id", *req.ID)
	}
	if req.Updtime != nil {
		q.Add("updtime", *req.Updtime)
	}
	if req.Details != nil {
		q.Add("details", string(*req.Details))
	}
	if req.Symbol != nil {
		q.Add("symbol", *req.Symbol)
	}
	if req.State != nil {
		q.Add("state", string(*req.State))
	}
	if req.Side != nil {
		q.Add("side", string(*req.Side))
	}
	if req.Cashmargin != nil {
		q.Add("cashmargin", string(*req.Cashmargin))
	}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 取得する商品
// |定義値|説明  |
// |------|------|
// |0     |すべて|
// |1     |現物  |
// |2     |信用  |
// |3     |先物  |
// |4     |OP    |
type GetPositionsQueryProduct string

const (
	// |0|すべて|
	GetPositionsQueryProductすべて GetPositionsQueryProduct = "0"
	// |1|現物|
	GetPositionsQueryProduct現物 GetPositionsQueryProduct = "1"
	// |2|信用|
	GetPositionsQueryProduct信用 GetPositionsQueryProduct = "2"
	// |3|先物|
	GetPositionsQueryProduct先物 GetPositionsQueryProduct = "3"
	// |4|OP|
	GetPositionsQueryProductOP GetPositionsQueryProduct = "4"
)

// GetPositionsQuery is definition of GetPositionsQuery.
type GetPositionsQuery struct {
	// 取得する商品
	// |定義値|説明  |
	// |------|------|
	// |0     |すべて|
	// |1     |現物  |
	// |2     |信用  |
	// |3     |先物  |
	// |4     |OP    |
	Product *GetPositionsQueryProduct `json:"product"`
	// 銘柄コード
	// ※指定された銘柄コードと一致するポジションのみレスポンスします。
	// ※複数の銘柄コードを指定することはできません。
	Symbol *string `json:"symbol"`
}

// 残高照会
// 残高一覧を取得します。
// ※下記Queryパラメータは任意設定となります。
func (c Client) GetPositions(
	ctx context.Context,
	req GetPositionsQuery,
) (PositionsSuccess, error) {
	pat := "/positions"
	res := PositionsSuccess{}
	q := url.Values{}
	if req.Product != nil {
		q.Add("product", string(*req.Product))
	}
	if req.Symbol != nil {
		q.Add("symbol", *req.Symbol)
	}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 銘柄登録
// PUSH配信する銘柄を登録します
func (c Client) PutRegister(
	ctx context.Context,
	req RequestRegister,
) (RegistSuccess, error) {
	pat := "/register"
	res := RegistSuccess{}
	err := c.putRequest(ctx, pat, req, &res)
	return res, err
}

// 注文発注（現物・信用）
// 注文を発注します。
// 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
func (c Client) PostSendorder(
	ctx context.Context,
	req RequestSendOrder,
) (OrderSuccess, error) {
	pat := "/sendorder"
	res := OrderSuccess{}
	err := c.postRequest(ctx, pat, req, &res)
	return res, err
}

// 注文発注（先物）
// 先物銘柄の注文を発注します。
// 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
func (c Client) PostSendorderFuture(
	ctx context.Context,
	req RequestSendOrderDerivFuture,
) (OrderSuccess, error) {
	pat := "/sendorder/future"
	res := OrderSuccess{}
	err := c.postRequest(ctx, pat, req, &res)
	return res, err
}

// 注文発注（オプション）
// オプション銘柄の注文を発注します。
// 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
func (c Client) PostSendorderOption(
	ctx context.Context,
	req RequestSendOrderDerivOption,
) (OrderSuccess, error) {
	pat := "/sendorder/option"
	res := OrderSuccess{}
	err := c.postRequest(ctx, pat, req, &res)
	return res, err
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |1     |東証  |
// |3     |名証  |
// |5     |福証  |
// |6     |札証  |
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type GetSymbolOfParamExchange string

const (
	// |1|東証|
	GetSymbolOfParamExchange東証 GetSymbolOfParamExchange = "1"
	// |3|名証|
	GetSymbolOfParamExchange名証 GetSymbolOfParamExchange = "3"
	// |5|福証|
	GetSymbolOfParamExchange福証 GetSymbolOfParamExchange = "5"
	// |6|札証|
	GetSymbolOfParamExchange札証 GetSymbolOfParamExchange = "6"
	// |2|日通し|
	GetSymbolOfParamExchange日通し GetSymbolOfParamExchange = "2"
	// |23|日中|
	GetSymbolOfParamExchange日中 GetSymbolOfParamExchange = "23"
	// |24|夜間|
	GetSymbolOfParamExchange夜間 GetSymbolOfParamExchange = "24"
)

// P returns pointer of GetSymbolOfParamExchange.
func (e GetSymbolOfParamExchange) P() *GetSymbolOfParamExchange {
	v := e
	return &v
}

// 銘柄情報
// 指定した銘柄情報を取得します
func (c Client) GetSymbolOf(
	ctx context.Context,
	symbol string,
	exchange GetSymbolOfParamExchange,
) (SymbolSuccess, error) {
	pat := fmt.Sprintf("/symbol/%v@%v", symbol, exchange)
	res := SymbolSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 先物コード
// ※大文字小文字は区別しません。
// |定義値   |説明            |
// |---------|----------------|
// |NK225    |日経平均先物    |
// |NK225mini|日経225mini先物 |
// |TOPIX    |TOPIX先物       |
// |TOPIXmini|ミニTOPIX先物   |
// |MOTHERS  |東証マザーズ先物|
// |JPX400   |JPX日経400先物  |
// |DOW      |NYダウ先物      |
// |VI       |日経平均VI先物  |
// |Core30   |TOPIX Core30先物|
// |REIT     |東証REIT指数先物|
type GetSymbolnameFutureQueryFutureCode string

const (
	// |NK225|日経平均先物|
	GetSymbolnameFutureQueryFutureCode日経平均先物 GetSymbolnameFutureQueryFutureCode = "NK225"
	// |NK225mini|日経225mini先物|
	GetSymbolnameFutureQueryFutureCode日経225mini先物 GetSymbolnameFutureQueryFutureCode = "NK225mini"
	// |TOPIX|TOPIX先物|
	GetSymbolnameFutureQueryFutureCodeTOPIX先物 GetSymbolnameFutureQueryFutureCode = "TOPIX"
	// |TOPIXmini|ミニTOPIX先物|
	GetSymbolnameFutureQueryFutureCodeミニTOPIX先物 GetSymbolnameFutureQueryFutureCode = "TOPIXmini"
	// |MOTHERS|東証マザーズ先物|
	GetSymbolnameFutureQueryFutureCode東証マザーズ先物 GetSymbolnameFutureQueryFutureCode = "MOTHERS"
	// |JPX400|JPX日経400先物|
	GetSymbolnameFutureQueryFutureCodeJPX日経400先物 GetSymbolnameFutureQueryFutureCode = "JPX400"
	// |DOW|NYダウ先物|
	GetSymbolnameFutureQueryFutureCodeNYダウ先物 GetSymbolnameFutureQueryFutureCode = "DOW"
	// |VI|日経平均VI先物|
	GetSymbolnameFutureQueryFutureCode日経平均VI先物 GetSymbolnameFutureQueryFutureCode = "VI"
	// |Core30|TOPIX Core30先物|
	GetSymbolnameFutureQueryFutureCodeTOPIX_Core30先物 GetSymbolnameFutureQueryFutureCode = "Core30"
	// |REIT|東証REIT指数先物|
	GetSymbolnameFutureQueryFutureCode東証REIT指数先物 GetSymbolnameFutureQueryFutureCode = "REIT"
)

// GetSymbolnameFutureQuery is definition of GetSymbolnameFutureQuery.
type GetSymbolnameFutureQuery struct {
	// 先物コード
	// ※大文字小文字は区別しません。
	// |定義値   |説明            |
	// |---------|----------------|
	// |NK225    |日経平均先物    |
	// |NK225mini|日経225mini先物 |
	// |TOPIX    |TOPIX先物       |
	// |TOPIXmini|ミニTOPIX先物   |
	// |MOTHERS  |東証マザーズ先物|
	// |JPX400   |JPX日経400先物  |
	// |DOW      |NYダウ先物      |
	// |VI       |日経平均VI先物  |
	// |Core30   |TOPIX Core30先物|
	// |REIT     |東証REIT指数先物|
	FutureCode *GetSymbolnameFutureQueryFutureCode `json:"FutureCode"`
	// 限月
	// ※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。
	// ※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
	DerivMonth int32 `json:"DerivMonth"`
}

// 先物銘柄コード取得
// 先物銘柄コード取得
func (c Client) GetSymbolnameFuture(
	ctx context.Context,
	req GetSymbolnameFutureQuery,
) (SymbolNameSuccess, error) {
	pat := "/symbolname/future"
	res := SymbolNameSuccess{}
	q := url.Values{}
	if req.FutureCode != nil {
		q.Add("FutureCode", string(*req.FutureCode))
	}
	q.Add("DerivMonth", strconv.Itoa(int(req.DerivMonth)))
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// コール or プット
// ※大文字小文字は区別しません。
// |定義値|説明|
// |------|----|
// |P     |PUT |
// |C     |CALL|
type GetSymbolnameOptionQueryPutOrCall string

const (
	// |P|PUT|
	GetSymbolnameOptionQueryPutOrCallPUT GetSymbolnameOptionQueryPutOrCall = "P"
	// |C|CALL|
	GetSymbolnameOptionQueryPutOrCallCALL GetSymbolnameOptionQueryPutOrCall = "C"
)

// GetSymbolnameOptionQuery is definition of GetSymbolnameOptionQuery.
type GetSymbolnameOptionQuery struct {
	// 限月
	// ※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。
	// ※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
	DerivMonth int32 `json:"DerivMonth"`
	// コール or プット
	// ※大文字小文字は区別しません。
	// |定義値|説明|
	// |------|----|
	// |P     |PUT |
	// |C     |CALL|
	PutOrCall GetSymbolnameOptionQueryPutOrCall `json:"PutOrCall"`
	// 権利行使価格
	// ※0を指定した場合、APIを実行した時点でのATMとなります。
	StrikePrice int32 `json:"StrikePrice"`
}

// オプション銘柄コード取得
// オプション銘柄コード取得"
func (c Client) GetSymbolnameOption(
	ctx context.Context,
	req GetSymbolnameOptionQuery,
) (SymbolNameSuccess, error) {
	pat := "/symbolname/option"
	res := SymbolNameSuccess{}
	q := url.Values{}
	q.Add("DerivMonth", strconv.Itoa(int(req.DerivMonth)))
	q.Add("PutOrCall", string(req.PutOrCall))
	q.Add("StrikePrice", strconv.Itoa(int(req.StrikePrice)))
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// トークン発行
// APIトークンを発行します。
// 発行したトークンは有効である限り使用することができ、リクエストごとに発行する必要はありません。
// 発行されたAPIトークンは以下のタイミングで無効となります。
// ・kabuステーションを終了した時
// ・kabuステーションからログアウトした時
// ・別のトークンが新たに発行された時
// ※kabuステーションは早朝、強制的にログアウトいたしますのでご留意ください。
func (c Client) PostToken(
	ctx context.Context,
	req RequestToken,
) (TokenSuccess, error) {
	pat := "/token"
	res := TokenSuccess{}
	err := c.postRequest(ctx, pat, req, &res)
	return res, err
}

// 銘柄登録解除
// API登録銘柄リストに登録されている銘柄を解除します
func (c Client) PutUnregister(
	ctx context.Context,
	req RequestRegister,
) (RegistSuccess, error) {
	pat := "/unregister"
	res := RegistSuccess{}
	err := c.putRequest(ctx, pat, req, &res)
	return res, err
}

// 銘柄登録全解除
// API登録銘柄リストに登録されている銘柄をすべて解除します
func (c Client) PutUnregisterAll(
	ctx context.Context,
) (UnregisterAllSuccess, error) {
	pat := "/unregister/all"
	res := UnregisterAllSuccess{}
	err := c.putRequest(ctx, pat, nil, &res)
	return res, err
}

// 取引余力（現物）
// 口座の取引余力（現物）を取得します
func (c Client) GetWalletCash(
	ctx context.Context,
) (WalletCashSuccess, error) {
	pat := "/wallet/cash"
	res := WalletCashSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 市場コード
// |定義値|説明|
// |------|----|
// |1     |東証|
// |3     |名証|
// |5     |福証|
// |6     |札証|
type GetWalletCashOfParamExchange string

const (
	// |1|東証|
	GetWalletCashOfParamExchange東証 GetWalletCashOfParamExchange = "1"
	// |3|名証|
	GetWalletCashOfParamExchange名証 GetWalletCashOfParamExchange = "3"
	// |5|福証|
	GetWalletCashOfParamExchange福証 GetWalletCashOfParamExchange = "5"
	// |6|札証|
	GetWalletCashOfParamExchange札証 GetWalletCashOfParamExchange = "6"
)

// P returns pointer of GetWalletCashOfParamExchange.
func (e GetWalletCashOfParamExchange) P() *GetWalletCashOfParamExchange {
	v := e
	return &v
}

// 取引余力（現物）（銘柄指定）
// 指定した銘柄の取引余力（現物）を取得します
func (c Client) GetWalletCashOf(
	ctx context.Context,
	symbol string,
	exchange GetWalletCashOfParamExchange,
) (WalletCashSuccess, error) {
	pat := fmt.Sprintf("/wallet/cash/%v@%v", symbol, exchange)
	res := WalletCashSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 取引余力（先物）
// 口座の取引余力（先物）を取得します
func (c Client) GetWalletFuture(
	ctx context.Context,
) (WalletFutureSuccess, error) {
	pat := "/wallet/future"
	res := WalletFutureSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type GetWalletFutureOfParamExchange string

const (
	// |2|日通し|
	GetWalletFutureOfParamExchange日通し GetWalletFutureOfParamExchange = "2"
	// |23|日中|
	GetWalletFutureOfParamExchange日中 GetWalletFutureOfParamExchange = "23"
	// |24|夜間|
	GetWalletFutureOfParamExchange夜間 GetWalletFutureOfParamExchange = "24"
)

// P returns pointer of GetWalletFutureOfParamExchange.
func (e GetWalletFutureOfParamExchange) P() *GetWalletFutureOfParamExchange {
	v := e
	return &v
}

// 取引余力（先物）（銘柄指定）
// 指定した銘柄の取引余力（先物）を取得します
func (c Client) GetWalletFutureOf(
	ctx context.Context,
	symbol string,
	exchange GetWalletFutureOfParamExchange,
) (WalletFutureSuccess, error) {
	pat := fmt.Sprintf("/wallet/future/%v@%v", symbol, exchange)
	res := WalletFutureSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 取引余力（信用）
// 口座の取引余力（信用）を取得します
func (c Client) GetWalletMargin(
	ctx context.Context,
) (WalletMarginSuccess, error) {
	pat := "/wallet/margin"
	res := WalletMarginSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 市場コード
// |定義値|説明|
// |------|----|
// |1     |東証|
// |3     |名証|
type GetWalletMarginOfParamExchange string

const (
	// |1|東証|
	GetWalletMarginOfParamExchange東証 GetWalletMarginOfParamExchange = "1"
	// |3|名証|
	GetWalletMarginOfParamExchange名証 GetWalletMarginOfParamExchange = "3"
)

// P returns pointer of GetWalletMarginOfParamExchange.
func (e GetWalletMarginOfParamExchange) P() *GetWalletMarginOfParamExchange {
	v := e
	return &v
}

// 取引余力（信用）（銘柄指定）
// 指定した銘柄の取引余力（信用）を取得します
func (c Client) GetWalletMarginOf(
	ctx context.Context,
	symbol string,
	exchange GetWalletMarginOfParamExchange,
) (WalletMarginSuccess, error) {
	pat := fmt.Sprintf("/wallet/margin/%v@%v", symbol, exchange)
	res := WalletMarginSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 取引余力（オプション）
// 口座の取引余力（オプション）を取得します
func (c Client) GetWalletOption(
	ctx context.Context,
) (WalletOptionSuccess, error) {
	pat := "/wallet/option"
	res := WalletOptionSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type GetWalletOptionOfParamExchange string

const (
	// |2|日通し|
	GetWalletOptionOfParamExchange日通し GetWalletOptionOfParamExchange = "2"
	// |23|日中|
	GetWalletOptionOfParamExchange日中 GetWalletOptionOfParamExchange = "23"
	// |24|夜間|
	GetWalletOptionOfParamExchange夜間 GetWalletOptionOfParamExchange = "24"
)

// P returns pointer of GetWalletOptionOfParamExchange.
func (e GetWalletOptionOfParamExchange) P() *GetWalletOptionOfParamExchange {
	v := e
	return &v
}

// 取引余力（オプション）（銘柄指定）
// 指定した銘柄の取引余力（オプション）を取得します
func (c Client) GetWalletOptionOf(
	ctx context.Context,
	symbol string,
	exchange GetWalletOptionOfParamExchange,
) (WalletOptionSuccess, error) {
	pat := fmt.Sprintf("/wallet/option/%v@%v", symbol, exchange)
	res := WalletOptionSuccess{}
	q := url.Values{}
	err := c.getRequest(ctx, pat, q, &res)
	return res, err
}
