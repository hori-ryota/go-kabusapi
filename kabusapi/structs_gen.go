// Code generated by internal/codegen; DO NOT EDIT.
package kabusapi

// OrdersSuccess is array of OrdersSuccessItem.
type OrdersSuccess []OrdersSuccessItem

// PositionsSuccess is array of PositionsSuccessItem.
type PositionsSuccess []PositionsSuccessItem

// RequestToken is definition of RequestToken.
type RequestToken struct {
	// APIパスワード
	APIPassword string `json:"APIPassword"`
}

// RequestSendOrder is definition of RequestSendOrder.
type RequestSendOrder struct {
	// 注文パスワード
	Password string `json:"Password"`
	// 銘柄コード
	Symbol string `json:"Symbol"`
	// 市場コード
	// |定義値|説明|
	// |------|----|
	// |1     |東証|
	// |3     |名証|
	// |5     |福証|
	// |6     |札証|
	Exchange RequestSendOrderExchange `json:"Exchange"`
	// 商品種別
	// |定義値|説明|
	// |------|----|
	// |1     |株式|
	SecurityType RequestSendOrderSecurityType `json:"SecurityType"`
	// 売買区分
	// |定義値|説明|
	// |------|----|
	// |1     |売  |
	// |2     |買  |
	Side RequestSendOrderSide `json:"Side"`
	// 信用区分
	// |定義値|説明|
	// |------|----|
	// |1     |現物|
	// |2     |新規|
	// |3     |返済|
	CashMargin RequestSendOrderCashMargin `json:"CashMargin"`
	// 信用取引区分
	// ※現物取引の場合は指定不要。
	// ※信用取引の場合、必須。
	// |定義値|説明            |
	// |------|----------------|
	// |1     |制度信用        |
	// |2     |一般信用        |
	// |3     |一般信用（売短）|
	MarginTradeType *RequestSendOrderMarginTradeType `json:"MarginTradeType"`
	// 受渡区分
	// ※現物買は指定必須。
	// ※現物売は「0(指定なし)」を設定
	// ※信用新規は「0(指定なし)」を設定
	// ※信用返済は指定必須
	// |定義値|説明    |
	// |------|--------|
	// |0     |指定なし|
	// |1     |自動振替|
	// |2     |お預り金|
	DelivType RequestSendOrderDelivType `json:"DelivType"`
	// 資産区分（預り区分）
	// ※現物買は、指定必須。
	// ※現物売は、「'  '」 半角スペース2つを指定必須。
	// ※信用新規と信用返済は、指定不要。
	// |定義値           |説明        |
	// |-----------------|------------|
	// |(半角スペース2つ)|現物売の場合|
	// |02               |保護        |
	// |AA               |信用代用    |
	// |11               |信用取引    |
	FundType *RequestSendOrderFundType `json:"FundType"`
	// 口座種別
	// |定義値|説明|
	// |------|----|
	// |2     |一般|
	// |4     |特定|
	// |12    |法人|
	AccountType RequestSendOrderAccountType `json:"AccountType"`
	// 注文数量
	// ※信用一括返済の場合、返済したい合計数量を入力してください。
	Qty int32 `json:"Qty"`
	// 決済順序
	// ※信用返済の場合、必須。
	// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
	// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
	// |定義値|説明                            |
	// |------|--------------------------------|
	// |0     |日付（古い順）、損益（高い順）  |
	// |1     |日付（古い順）、損益（低い順）  |
	// |2     |日付（新しい順）、損益（高い順）|
	// |3     |日付（新しい順）、損益（低い順）|
	// |4     |損益（高い順）、日付（古い順）  |
	// |5     |損益（高い順）、日付（新しい順）|
	// |6     |損益（低い順）、日付（古い順）  |
	// |7     |損益（低い順）、日付（新しい順）|
	ClosePositionOrder *RequestSendOrderClosePositionOrder `json:"ClosePositionOrder"`
	// 返済建玉指定
	// ※信用返済の場合、必須。
	// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
	// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
	// ※信用一括返済の場合、各建玉IDと返済したい数量を入力してください。
	// ※建玉IDは「E」から始まる番号です。
	ClosePositions []Positions `json:"ClosePositions"`
	// 執行条件
	// |定義値|説明        |”Price"の指定|
	// |------|------------|--------------|
	// |10    |成行        |0             |
	// |13    |寄成（前場）|0             |
	// |14    |寄成（後場）|0             |
	// |15    |引成（前場）|0             |
	// |16    |引成（後場）|0             |
	// |17    |IOC成行     |0             |
	// |20    |指値        |発注したい金額|
	// |21    |寄指（前場）|発注したい金額|
	// |22    |寄指（後場）|発注したい金額|
	// |23    |引指（前場）|発注したい金額|
	// |24    |引指（後場）|発注したい金額|
	// |25    |不成（前場）|発注したい金額|
	// |26    |不成（後場）|発注したい金額|
	// |27    |IOC指値     |発注したい金額|
	FrontOrderType RequestSendOrderFrontOrderType `json:"FrontOrderType"`
	// 注文価格
	// ※FrontOrderTypeで成行を指定した場合、0を指定する。
	// ※詳細について、”FrontOrderType”をご確認ください。
	Price float64 `json:"Price"`
	// |
	// 注文有効期限
	// yyyyMMdd形式。
	// 「0」を指定すると、kabuステーション上の発注画面の「本日」に対応する日付として扱います。
	// 「本日」は直近の注文可能日となり、以下のように設定されます。
	// 引けまでの間 : 当日
	// 引け後       : 翌取引所営業日
	// 休前日       : 休日明けの取引所営業日
	// ※ 日替わりはkabuステーションが日付変更通知を受信したタイミングです。
	ExpireDay int32 `json:"ExpireDay"`
}

// 市場コード
// |定義値|説明|
// |------|----|
// |1     |東証|
// |3     |名証|
// |5     |福証|
// |6     |札証|
type RequestSendOrderExchange int32

const (
	// |1|東証|
	RequestSendOrderExchange東証 RequestSendOrderExchange = 1
	// |3|名証|
	RequestSendOrderExchange名証 RequestSendOrderExchange = 3
	// |5|福証|
	RequestSendOrderExchange福証 RequestSendOrderExchange = 5
	// |6|札証|
	RequestSendOrderExchange札証 RequestSendOrderExchange = 6
)

// P returns pointer of RequestSendOrderExchange.
func (e RequestSendOrderExchange) P() *RequestSendOrderExchange {
	v := e
	return &v
}

// 商品種別
// |定義値|説明|
// |------|----|
// |1     |株式|
type RequestSendOrderSecurityType int32

const (
	// |1|株式|
	RequestSendOrderSecurityType株式 RequestSendOrderSecurityType = 1
)

// P returns pointer of RequestSendOrderSecurityType.
func (e RequestSendOrderSecurityType) P() *RequestSendOrderSecurityType {
	v := e
	return &v
}

// 売買区分
// |定義値|説明|
// |------|----|
// |1     |売  |
// |2     |買  |
type RequestSendOrderSide string

const (
	// |1|売|
	RequestSendOrderSide売 RequestSendOrderSide = "1"
	// |2|買|
	RequestSendOrderSide買 RequestSendOrderSide = "2"
)

// P returns pointer of RequestSendOrderSide.
func (e RequestSendOrderSide) P() *RequestSendOrderSide {
	v := e
	return &v
}

// 信用区分
// |定義値|説明|
// |------|----|
// |1     |現物|
// |2     |新規|
// |3     |返済|
type RequestSendOrderCashMargin int32

const (
	// |1|現物|
	RequestSendOrderCashMargin現物 RequestSendOrderCashMargin = 1
	// |2|新規|
	RequestSendOrderCashMargin新規 RequestSendOrderCashMargin = 2
	// |3|返済|
	RequestSendOrderCashMargin返済 RequestSendOrderCashMargin = 3
)

// P returns pointer of RequestSendOrderCashMargin.
func (e RequestSendOrderCashMargin) P() *RequestSendOrderCashMargin {
	v := e
	return &v
}

// 信用取引区分
// ※現物取引の場合は指定不要。
// ※信用取引の場合、必須。
// |定義値|説明            |
// |------|----------------|
// |1     |制度信用        |
// |2     |一般信用        |
// |3     |一般信用（売短）|
type RequestSendOrderMarginTradeType int32

const (
	// |1|制度信用|
	RequestSendOrderMarginTradeType制度信用 RequestSendOrderMarginTradeType = 1
	// |2|一般信用|
	RequestSendOrderMarginTradeType一般信用 RequestSendOrderMarginTradeType = 2
	// |3|一般信用（売短）|
	RequestSendOrderMarginTradeType一般信用_売短 RequestSendOrderMarginTradeType = 3
)

// P returns pointer of RequestSendOrderMarginTradeType.
func (e RequestSendOrderMarginTradeType) P() *RequestSendOrderMarginTradeType {
	v := e
	return &v
}

// 受渡区分
// ※現物買は指定必須。
// ※現物売は「0(指定なし)」を設定
// ※信用新規は「0(指定なし)」を設定
// ※信用返済は指定必須
// |定義値|説明    |
// |------|--------|
// |0     |指定なし|
// |1     |自動振替|
// |2     |お預り金|
type RequestSendOrderDelivType int32

const (
	// |0|指定なし|
	RequestSendOrderDelivType指定なし RequestSendOrderDelivType = 0
	// |1|自動振替|
	RequestSendOrderDelivType自動振替 RequestSendOrderDelivType = 1
	// |2|お預り金|
	RequestSendOrderDelivTypeお預り金 RequestSendOrderDelivType = 2
)

// P returns pointer of RequestSendOrderDelivType.
func (e RequestSendOrderDelivType) P() *RequestSendOrderDelivType {
	v := e
	return &v
}

// 資産区分（預り区分）
// ※現物買は、指定必須。
// ※現物売は、「'  '」 半角スペース2つを指定必須。
// ※信用新規と信用返済は、指定不要。
// |定義値           |説明        |
// |-----------------|------------|
// |(半角スペース2つ)|現物売の場合|
// |02               |保護        |
// |AA               |信用代用    |
// |11               |信用取引    |
type RequestSendOrderFundType string

const (
	// |(半角スペース2つ)|現物売の場合|
	RequestSendOrderFundType現物売の場合 RequestSendOrderFundType = "(半角スペース2つ)"
	// |02|保護|
	RequestSendOrderFundType保護 RequestSendOrderFundType = "02"
	// |AA|信用代用|
	RequestSendOrderFundType信用代用 RequestSendOrderFundType = "AA"
	// |11|信用取引|
	RequestSendOrderFundType信用取引 RequestSendOrderFundType = "11"
)

// P returns pointer of RequestSendOrderFundType.
func (e RequestSendOrderFundType) P() *RequestSendOrderFundType {
	v := e
	return &v
}

// 口座種別
// |定義値|説明|
// |------|----|
// |2     |一般|
// |4     |特定|
// |12    |法人|
type RequestSendOrderAccountType int32

const (
	// |2|一般|
	RequestSendOrderAccountType一般 RequestSendOrderAccountType = 2
	// |4|特定|
	RequestSendOrderAccountType特定 RequestSendOrderAccountType = 4
	// |12|法人|
	RequestSendOrderAccountType法人 RequestSendOrderAccountType = 12
)

// P returns pointer of RequestSendOrderAccountType.
func (e RequestSendOrderAccountType) P() *RequestSendOrderAccountType {
	v := e
	return &v
}

// 決済順序
// ※信用返済の場合、必須。
// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
// |定義値|説明                            |
// |------|--------------------------------|
// |0     |日付（古い順）、損益（高い順）  |
// |1     |日付（古い順）、損益（低い順）  |
// |2     |日付（新しい順）、損益（高い順）|
// |3     |日付（新しい順）、損益（低い順）|
// |4     |損益（高い順）、日付（古い順）  |
// |5     |損益（高い順）、日付（新しい順）|
// |6     |損益（低い順）、日付（古い順）  |
// |7     |損益（低い順）、日付（新しい順）|
type RequestSendOrderClosePositionOrder int32

const (
	// |0|日付（古い順）、損益（高い順）|
	RequestSendOrderClosePositionOrder日付_古い順__損益_高い順 RequestSendOrderClosePositionOrder = 0
	// |1|日付（古い順）、損益（低い順）|
	RequestSendOrderClosePositionOrder日付_古い順__損益_低い順 RequestSendOrderClosePositionOrder = 1
	// |2|日付（新しい順）、損益（高い順）|
	RequestSendOrderClosePositionOrder日付_新しい順__損益_高い順 RequestSendOrderClosePositionOrder = 2
	// |3|日付（新しい順）、損益（低い順）|
	RequestSendOrderClosePositionOrder日付_新しい順__損益_低い順 RequestSendOrderClosePositionOrder = 3
	// |4|損益（高い順）、日付（古い順）|
	RequestSendOrderClosePositionOrder損益_高い順__日付_古い順 RequestSendOrderClosePositionOrder = 4
	// |5|損益（高い順）、日付（新しい順）|
	RequestSendOrderClosePositionOrder損益_高い順__日付_新しい順 RequestSendOrderClosePositionOrder = 5
	// |6|損益（低い順）、日付（古い順）|
	RequestSendOrderClosePositionOrder損益_低い順__日付_古い順 RequestSendOrderClosePositionOrder = 6
	// |7|損益（低い順）、日付（新しい順）|
	RequestSendOrderClosePositionOrder損益_低い順__日付_新しい順 RequestSendOrderClosePositionOrder = 7
)

// P returns pointer of RequestSendOrderClosePositionOrder.
func (e RequestSendOrderClosePositionOrder) P() *RequestSendOrderClosePositionOrder {
	v := e
	return &v
}

// 執行条件
// |定義値|説明        |”Price"の指定|
// |------|------------|--------------|
// |10    |成行        |0             |
// |13    |寄成（前場）|0             |
// |14    |寄成（後場）|0             |
// |15    |引成（前場）|0             |
// |16    |引成（後場）|0             |
// |17    |IOC成行     |0             |
// |20    |指値        |発注したい金額|
// |21    |寄指（前場）|発注したい金額|
// |22    |寄指（後場）|発注したい金額|
// |23    |引指（前場）|発注したい金額|
// |24    |引指（後場）|発注したい金額|
// |25    |不成（前場）|発注したい金額|
// |26    |不成（後場）|発注したい金額|
// |27    |IOC指値     |発注したい金額|
type RequestSendOrderFrontOrderType int32

const (
	// |10|成行|0|
	RequestSendOrderFrontOrderType成行 RequestSendOrderFrontOrderType = 10
	// |13|寄成（前場）|0|
	RequestSendOrderFrontOrderType寄成_前場 RequestSendOrderFrontOrderType = 13
	// |14|寄成（後場）|0|
	RequestSendOrderFrontOrderType寄成_後場 RequestSendOrderFrontOrderType = 14
	// |15|引成（前場）|0|
	RequestSendOrderFrontOrderType引成_前場 RequestSendOrderFrontOrderType = 15
	// |16|引成（後場）|0|
	RequestSendOrderFrontOrderType引成_後場 RequestSendOrderFrontOrderType = 16
	// |17|IOC成行|0|
	RequestSendOrderFrontOrderTypeIOC成行 RequestSendOrderFrontOrderType = 17
	// |20|指値|発注したい金額|
	RequestSendOrderFrontOrderType指値 RequestSendOrderFrontOrderType = 20
	// |21|寄指（前場）|発注したい金額|
	RequestSendOrderFrontOrderType寄指_前場 RequestSendOrderFrontOrderType = 21
	// |22|寄指（後場）|発注したい金額|
	RequestSendOrderFrontOrderType寄指_後場 RequestSendOrderFrontOrderType = 22
	// |23|引指（前場）|発注したい金額|
	RequestSendOrderFrontOrderType引指_前場 RequestSendOrderFrontOrderType = 23
	// |24|引指（後場）|発注したい金額|
	RequestSendOrderFrontOrderType引指_後場 RequestSendOrderFrontOrderType = 24
	// |25|不成（前場）|発注したい金額|
	RequestSendOrderFrontOrderType不成_前場 RequestSendOrderFrontOrderType = 25
	// |26|不成（後場）|発注したい金額|
	RequestSendOrderFrontOrderType不成_後場 RequestSendOrderFrontOrderType = 26
	// |27|IOC指値|発注したい金額|
	RequestSendOrderFrontOrderTypeIOC指値 RequestSendOrderFrontOrderType = 27
)

// P returns pointer of RequestSendOrderFrontOrderType.
func (e RequestSendOrderFrontOrderType) P() *RequestSendOrderFrontOrderType {
	v := e
	return &v
}

// RequestSendOrderDerivFuture is definition of RequestSendOrderDerivFuture.
type RequestSendOrderDerivFuture struct {
	// 注文パスワード
	Password string `json:"Password"`
	// 銘柄コード
	// ※取引最終日に「先物銘柄コード取得」でDerivMonthに0（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
	Symbol string `json:"Symbol"`
	// 市場コード
	// |定義値|説明  |
	// |------|------|
	// |2     |日通し|
	// |23    |日中  |
	// |24    |夜間  |
	Exchange RequestSendOrderDerivFutureExchange `json:"Exchange"`
	// 取引区分
	// |定義値|説明|
	// |------|----|
	// |1     |新規|
	// |2     |返済|
	TradeType RequestSendOrderDerivFutureTradeType `json:"TradeType"`
	// 有効期間条件
	// |定義値|説明                                                               |
	// |------|-------------------------------------------------------------------|
	// |1     |FAS ※FASを指定した場合、FrontOrderTypeは指値(20)のみ指定可能。    |
	// |2     |FAK ※FAKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
	// |3     |FOK ※FOKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
	TimeInForce RequestSendOrderDerivFutureTimeInForce `json:"TimeInForce"`
	// 売買区分
	// |定義値|説明|
	// |------|----|
	// |1     |売  |
	// |2     |買  |
	Side RequestSendOrderDerivFutureSide `json:"Side"`
	// 注文数量
	Qty int32 `json:"Qty"`
	// 決済順序
	// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
	// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
	// |定義値|説明                            |
	// |------|--------------------------------|
	// |0     |日付（古い順）、損益（高い順）  |
	// |1     |日付（古い順）、損益（低い順）  |
	// |2     |日付（新しい順）、損益（高い順）|
	// |3     |日付（新しい順）、損益（低い順）|
	// |4     |損益（高い順）、日付（古い順）  |
	// |5     |損益（高い順）、日付（新しい順）|
	// |6     |損益（低い順）、日付（古い順）  |
	// |7     |損益（低い順）、日付（新しい順）|
	ClosePositionOrder *RequestSendOrderDerivFutureClosePositionOrder `json:"ClosePositionOrder"`
	// 返済建玉指定
	// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
	// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
	ClosePositions []PositionsDeriv `json:"ClosePositions"`
	// 執行条件
	// |定義値|説明                                         |”Price”の指定|
	// |------|---------------------------------------------|---------------|
	// |18    |引成（派生） ※TimeInForceは、「FAK」のみ有効|0              |
	// |20    |指値                                         |発注したい金額 |
	// |28    |引指（派生） ※TimeInForceは、「FAS」のみ有効|発注したい金額 |
	// |120   |成行（マーケットオーダー）                   |0              |
	FrontOrderType RequestSendOrderDerivFutureFrontOrderType `json:"FrontOrderType"`
	// 注文価格
	// ※FrontOrderTypeで成行を指定した場合、0を指定する。
	// ※詳細について、”FrontOrderType”をご確認ください。
	Price int32 `json:"Price"`
	// 注文有効期限
	// yyyyMMdd形式。
	// 「0」を指定すると、kabuステーション上の発注画面の「本日」に対応する日付として扱います。
	// 「本日」は直近の注文可能日となり、以下のように設定されます。
	// その市場の引けまでの間 : 当日
	// その市場の引け後       : 翌取引所営業日
	// その市場の休前日       : 休日明けの取引所営業日
	// ※ 日替わりはkabuステーションが日付変更通知を受信したタイミングです。
	// ※ 日通しの場合、夜間取引の引け後に日付が更新されます。
	ExpireDay int32 `json:"ExpireDay"`
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type RequestSendOrderDerivFutureExchange int32

const (
	// |2|日通し|
	RequestSendOrderDerivFutureExchange日通し RequestSendOrderDerivFutureExchange = 2
	// |23|日中|
	RequestSendOrderDerivFutureExchange日中 RequestSendOrderDerivFutureExchange = 23
	// |24|夜間|
	RequestSendOrderDerivFutureExchange夜間 RequestSendOrderDerivFutureExchange = 24
)

// P returns pointer of RequestSendOrderDerivFutureExchange.
func (e RequestSendOrderDerivFutureExchange) P() *RequestSendOrderDerivFutureExchange {
	v := e
	return &v
}

// 取引区分
// |定義値|説明|
// |------|----|
// |1     |新規|
// |2     |返済|
type RequestSendOrderDerivFutureTradeType int32

const (
	// |1|新規|
	RequestSendOrderDerivFutureTradeType新規 RequestSendOrderDerivFutureTradeType = 1
	// |2|返済|
	RequestSendOrderDerivFutureTradeType返済 RequestSendOrderDerivFutureTradeType = 2
)

// P returns pointer of RequestSendOrderDerivFutureTradeType.
func (e RequestSendOrderDerivFutureTradeType) P() *RequestSendOrderDerivFutureTradeType {
	v := e
	return &v
}

// 有効期間条件
// |定義値|説明                                                               |
// |------|-------------------------------------------------------------------|
// |1     |FAS ※FASを指定した場合、FrontOrderTypeは指値(20)のみ指定可能。    |
// |2     |FAK ※FAKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
// |3     |FOK ※FOKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
type RequestSendOrderDerivFutureTimeInForce int32

const (
	// |1|FAS※FASを指定した場合、FrontOrderTypeは指値(20)のみ指定可能。|
	RequestSendOrderDerivFutureTimeInForceFAS RequestSendOrderDerivFutureTimeInForce = 1
	// |2|FAK※FAKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
	RequestSendOrderDerivFutureTimeInForceFAK RequestSendOrderDerivFutureTimeInForce = 2
	// |3|FOK※FOKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
	RequestSendOrderDerivFutureTimeInForceFOK RequestSendOrderDerivFutureTimeInForce = 3
)

// P returns pointer of RequestSendOrderDerivFutureTimeInForce.
func (e RequestSendOrderDerivFutureTimeInForce) P() *RequestSendOrderDerivFutureTimeInForce {
	v := e
	return &v
}

// 売買区分
// |定義値|説明|
// |------|----|
// |1     |売  |
// |2     |買  |
type RequestSendOrderDerivFutureSide string

const (
	// |1|売|
	RequestSendOrderDerivFutureSide売 RequestSendOrderDerivFutureSide = "1"
	// |2|買|
	RequestSendOrderDerivFutureSide買 RequestSendOrderDerivFutureSide = "2"
)

// P returns pointer of RequestSendOrderDerivFutureSide.
func (e RequestSendOrderDerivFutureSide) P() *RequestSendOrderDerivFutureSide {
	v := e
	return &v
}

// 決済順序
// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
// |定義値|説明                            |
// |------|--------------------------------|
// |0     |日付（古い順）、損益（高い順）  |
// |1     |日付（古い順）、損益（低い順）  |
// |2     |日付（新しい順）、損益（高い順）|
// |3     |日付（新しい順）、損益（低い順）|
// |4     |損益（高い順）、日付（古い順）  |
// |5     |損益（高い順）、日付（新しい順）|
// |6     |損益（低い順）、日付（古い順）  |
// |7     |損益（低い順）、日付（新しい順）|
type RequestSendOrderDerivFutureClosePositionOrder int32

const (
	// |0|日付（古い順）、損益（高い順）|
	RequestSendOrderDerivFutureClosePositionOrder日付_古い順__損益_高い順 RequestSendOrderDerivFutureClosePositionOrder = 0
	// |1|日付（古い順）、損益（低い順）|
	RequestSendOrderDerivFutureClosePositionOrder日付_古い順__損益_低い順 RequestSendOrderDerivFutureClosePositionOrder = 1
	// |2|日付（新しい順）、損益（高い順）|
	RequestSendOrderDerivFutureClosePositionOrder日付_新しい順__損益_高い順 RequestSendOrderDerivFutureClosePositionOrder = 2
	// |3|日付（新しい順）、損益（低い順）|
	RequestSendOrderDerivFutureClosePositionOrder日付_新しい順__損益_低い順 RequestSendOrderDerivFutureClosePositionOrder = 3
	// |4|損益（高い順）、日付（古い順）|
	RequestSendOrderDerivFutureClosePositionOrder損益_高い順__日付_古い順 RequestSendOrderDerivFutureClosePositionOrder = 4
	// |5|損益（高い順）、日付（新しい順）|
	RequestSendOrderDerivFutureClosePositionOrder損益_高い順__日付_新しい順 RequestSendOrderDerivFutureClosePositionOrder = 5
	// |6|損益（低い順）、日付（古い順）|
	RequestSendOrderDerivFutureClosePositionOrder損益_低い順__日付_古い順 RequestSendOrderDerivFutureClosePositionOrder = 6
	// |7|損益（低い順）、日付（新しい順）|
	RequestSendOrderDerivFutureClosePositionOrder損益_低い順__日付_新しい順 RequestSendOrderDerivFutureClosePositionOrder = 7
)

// P returns pointer of RequestSendOrderDerivFutureClosePositionOrder.
func (e RequestSendOrderDerivFutureClosePositionOrder) P() *RequestSendOrderDerivFutureClosePositionOrder {
	v := e
	return &v
}

// 執行条件
// |定義値|説明                                         |”Price”の指定|
// |------|---------------------------------------------|---------------|
// |18    |引成（派生） ※TimeInForceは、「FAK」のみ有効|0              |
// |20    |指値                                         |発注したい金額 |
// |28    |引指（派生） ※TimeInForceは、「FAS」のみ有効|発注したい金額 |
// |120   |成行（マーケットオーダー）                   |0              |
type RequestSendOrderDerivFutureFrontOrderType int32

const (
	// |18|引成（派生）※TimeInForceは、「FAK」のみ有効|0|
	RequestSendOrderDerivFutureFrontOrderType引成_派生 RequestSendOrderDerivFutureFrontOrderType = 18
	// |20|指値|発注したい金額|
	RequestSendOrderDerivFutureFrontOrderType指値 RequestSendOrderDerivFutureFrontOrderType = 20
	// |28|引指（派生）※TimeInForceは、「FAS」のみ有効|発注したい金額|
	RequestSendOrderDerivFutureFrontOrderType引指_派生 RequestSendOrderDerivFutureFrontOrderType = 28
	// |120|成行（マーケットオーダー）|0|
	RequestSendOrderDerivFutureFrontOrderType成行_マーケットオーダー RequestSendOrderDerivFutureFrontOrderType = 120
)

// P returns pointer of RequestSendOrderDerivFutureFrontOrderType.
func (e RequestSendOrderDerivFutureFrontOrderType) P() *RequestSendOrderDerivFutureFrontOrderType {
	v := e
	return &v
}

// RequestSendOrderDerivOption is definition of RequestSendOrderDerivOption.
type RequestSendOrderDerivOption struct {
	// 注文パスワード
	Password string `json:"Password"`
	// 銘柄コード
	// ※取引最終日に「オプション銘柄コード取得」でDerivMonthに0（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
	Symbol string `json:"Symbol"`
	// 市場コード
	// |定義値|説明  |
	// |------|------|
	// |2     |日通し|
	// |23    |日中  |
	// |24    |夜間  |
	Exchange RequestSendOrderDerivOptionExchange `json:"Exchange"`
	// 取引区分
	// |定義値|説明|
	// |------|----|
	// |1     |新規|
	// |2     |返済|
	TradeType RequestSendOrderDerivOptionTradeType `json:"TradeType"`
	// 有効期間条件
	// |定義値|説明                                                               |
	// |------|-------------------------------------------------------------------|
	// |1     |FAS ※FASを指定した場合、FrontOrderTypeは指値(20)のみ指定可能。    |
	// |2     |FAK ※FAKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
	// |3     |FOK ※FOKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
	TimeInForce RequestSendOrderDerivOptionTimeInForce `json:"TimeInForce"`
	// 売買区分
	// |定義値|説明|
	// |------|----|
	// |1     |売  |
	// |2     |買  |
	Side RequestSendOrderDerivOptionSide `json:"Side"`
	// 注文数量
	Qty int32 `json:"Qty"`
	// 決済順序
	// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
	// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
	// |定義値|説明                            |
	// |------|--------------------------------|
	// |0     |日付（古い順）、損益（高い順）  |
	// |1     |日付（古い順）、損益（低い順）  |
	// |2     |日付（新しい順）、損益（高い順）|
	// |3     |日付（新しい順）、損益（低い順）|
	// |4     |損益（高い順）、日付（古い順）  |
	// |5     |損益（高い順）、日付（新しい順）|
	// |6     |損益（低い順）、日付（古い順）  |
	// |7     |損益（低い順）、日付（新しい順）|
	ClosePositionOrder *RequestSendOrderDerivOptionClosePositionOrder `json:"ClosePositionOrder"`
	// 返済建玉指定
	// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
	// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
	ClosePositions []PositionsDeriv `json:"ClosePositions"`
	// 執行条件
	// |定義値|説明                                         |”Price”の指定|
	// |------|---------------------------------------------|---------------|
	// |18    |引成（派生） ※TimeInForceは、「FAK」のみ有効|0              |
	// |20    |指値                                         |発注したい金額 |
	// |28    |引指（派生） ※TimeInForceは、「FAS」のみ有効|発注したい金額 |
	// |120   |成行（マーケットオーダー）                   |0              |
	FrontOrderType RequestSendOrderDerivOptionFrontOrderType `json:"FrontOrderType"`
	// 注文価格
	// ※FrontOrderTypeで成行を指定した場合、0を指定する。
	// ※詳細について、”FrontOrderType”をご確認ください。
	Price int32 `json:"Price"`
	// 注文有効期限
	// yyyyMMdd形式。
	// 「0」を指定すると、kabuステーション上の発注画面の「本日」に対応する日付として扱います。
	// 「本日」は直近の注文可能日となり、以下のように設定されます。
	// その市場の引けまでの間 : 当日
	// その市場の引け後       : 翌取引所営業日
	// その市場の休前日       : 休日明けの取引所営業日
	// ※ 日替わりはkabuステーションが日付変更通知を受信したタイミングです。
	// ※ 日通しの場合、夜間取引の引け後に日付が更新されます。
	ExpireDay int32 `json:"ExpireDay"`
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type RequestSendOrderDerivOptionExchange int32

const (
	// |2|日通し|
	RequestSendOrderDerivOptionExchange日通し RequestSendOrderDerivOptionExchange = 2
	// |23|日中|
	RequestSendOrderDerivOptionExchange日中 RequestSendOrderDerivOptionExchange = 23
	// |24|夜間|
	RequestSendOrderDerivOptionExchange夜間 RequestSendOrderDerivOptionExchange = 24
)

// P returns pointer of RequestSendOrderDerivOptionExchange.
func (e RequestSendOrderDerivOptionExchange) P() *RequestSendOrderDerivOptionExchange {
	v := e
	return &v
}

// 取引区分
// |定義値|説明|
// |------|----|
// |1     |新規|
// |2     |返済|
type RequestSendOrderDerivOptionTradeType int32

const (
	// |1|新規|
	RequestSendOrderDerivOptionTradeType新規 RequestSendOrderDerivOptionTradeType = 1
	// |2|返済|
	RequestSendOrderDerivOptionTradeType返済 RequestSendOrderDerivOptionTradeType = 2
)

// P returns pointer of RequestSendOrderDerivOptionTradeType.
func (e RequestSendOrderDerivOptionTradeType) P() *RequestSendOrderDerivOptionTradeType {
	v := e
	return &v
}

// 有効期間条件
// |定義値|説明                                                               |
// |------|-------------------------------------------------------------------|
// |1     |FAS ※FASを指定した場合、FrontOrderTypeは指値(20)のみ指定可能。    |
// |2     |FAK ※FAKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
// |3     |FOK ※FOKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
type RequestSendOrderDerivOptionTimeInForce int32

const (
	// |1|FAS※FASを指定した場合、FrontOrderTypeは指値(20)のみ指定可能。|
	RequestSendOrderDerivOptionTimeInForceFAS RequestSendOrderDerivOptionTimeInForce = 1
	// |2|FAK※FAKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
	RequestSendOrderDerivOptionTimeInForceFAK RequestSendOrderDerivOptionTimeInForce = 2
	// |3|FOK※FOKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。|
	RequestSendOrderDerivOptionTimeInForceFOK RequestSendOrderDerivOptionTimeInForce = 3
)

// P returns pointer of RequestSendOrderDerivOptionTimeInForce.
func (e RequestSendOrderDerivOptionTimeInForce) P() *RequestSendOrderDerivOptionTimeInForce {
	v := e
	return &v
}

// 売買区分
// |定義値|説明|
// |------|----|
// |1     |売  |
// |2     |買  |
type RequestSendOrderDerivOptionSide string

const (
	// |1|売|
	RequestSendOrderDerivOptionSide売 RequestSendOrderDerivOptionSide = "1"
	// |2|買|
	RequestSendOrderDerivOptionSide買 RequestSendOrderDerivOptionSide = "2"
)

// P returns pointer of RequestSendOrderDerivOptionSide.
func (e RequestSendOrderDerivOptionSide) P() *RequestSendOrderDerivOptionSide {
	v := e
	return &v
}

// 決済順序
// ※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。
// ※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
// |定義値|説明                            |
// |------|--------------------------------|
// |0     |日付（古い順）、損益（高い順）  |
// |1     |日付（古い順）、損益（低い順）  |
// |2     |日付（新しい順）、損益（高い順）|
// |3     |日付（新しい順）、損益（低い順）|
// |4     |損益（高い順）、日付（古い順）  |
// |5     |損益（高い順）、日付（新しい順）|
// |6     |損益（低い順）、日付（古い順）  |
// |7     |損益（低い順）、日付（新しい順）|
type RequestSendOrderDerivOptionClosePositionOrder int32

const (
	// |0|日付（古い順）、損益（高い順）|
	RequestSendOrderDerivOptionClosePositionOrder日付_古い順__損益_高い順 RequestSendOrderDerivOptionClosePositionOrder = 0
	// |1|日付（古い順）、損益（低い順）|
	RequestSendOrderDerivOptionClosePositionOrder日付_古い順__損益_低い順 RequestSendOrderDerivOptionClosePositionOrder = 1
	// |2|日付（新しい順）、損益（高い順）|
	RequestSendOrderDerivOptionClosePositionOrder日付_新しい順__損益_高い順 RequestSendOrderDerivOptionClosePositionOrder = 2
	// |3|日付（新しい順）、損益（低い順）|
	RequestSendOrderDerivOptionClosePositionOrder日付_新しい順__損益_低い順 RequestSendOrderDerivOptionClosePositionOrder = 3
	// |4|損益（高い順）、日付（古い順）|
	RequestSendOrderDerivOptionClosePositionOrder損益_高い順__日付_古い順 RequestSendOrderDerivOptionClosePositionOrder = 4
	// |5|損益（高い順）、日付（新しい順）|
	RequestSendOrderDerivOptionClosePositionOrder損益_高い順__日付_新しい順 RequestSendOrderDerivOptionClosePositionOrder = 5
	// |6|損益（低い順）、日付（古い順）|
	RequestSendOrderDerivOptionClosePositionOrder損益_低い順__日付_古い順 RequestSendOrderDerivOptionClosePositionOrder = 6
	// |7|損益（低い順）、日付（新しい順）|
	RequestSendOrderDerivOptionClosePositionOrder損益_低い順__日付_新しい順 RequestSendOrderDerivOptionClosePositionOrder = 7
)

// P returns pointer of RequestSendOrderDerivOptionClosePositionOrder.
func (e RequestSendOrderDerivOptionClosePositionOrder) P() *RequestSendOrderDerivOptionClosePositionOrder {
	v := e
	return &v
}

// 執行条件
// |定義値|説明                                         |”Price”の指定|
// |------|---------------------------------------------|---------------|
// |18    |引成（派生） ※TimeInForceは、「FAK」のみ有効|0              |
// |20    |指値                                         |発注したい金額 |
// |28    |引指（派生） ※TimeInForceは、「FAS」のみ有効|発注したい金額 |
// |120   |成行（マーケットオーダー）                   |0              |
type RequestSendOrderDerivOptionFrontOrderType int32

const (
	// |18|引成（派生）※TimeInForceは、「FAK」のみ有効|0|
	RequestSendOrderDerivOptionFrontOrderType引成_派生 RequestSendOrderDerivOptionFrontOrderType = 18
	// |20|指値|発注したい金額|
	RequestSendOrderDerivOptionFrontOrderType指値 RequestSendOrderDerivOptionFrontOrderType = 20
	// |28|引指（派生）※TimeInForceは、「FAS」のみ有効|発注したい金額|
	RequestSendOrderDerivOptionFrontOrderType引指_派生 RequestSendOrderDerivOptionFrontOrderType = 28
	// |120|成行（マーケットオーダー）|0|
	RequestSendOrderDerivOptionFrontOrderType成行_マーケットオーダー RequestSendOrderDerivOptionFrontOrderType = 120
)

// P returns pointer of RequestSendOrderDerivOptionFrontOrderType.
func (e RequestSendOrderDerivOptionFrontOrderType) P() *RequestSendOrderDerivOptionFrontOrderType {
	v := e
	return &v
}

// Positions is definition of Positions.
type Positions struct {
	// 返済建玉ID
	HoldID *string `json:"HoldID"`
	// 返済建玉数量
	Qty *int32 `json:"Qty"`
}

// PositionsDeriv is definition of PositionsDeriv.
type PositionsDeriv struct {
	// 返済建玉ID
	HoldID *string `json:"HoldID"`
	// 返済建玉数量
	Qty *int32 `json:"Qty"`
}

// RequestCancelOrder is definition of RequestCancelOrder.
type RequestCancelOrder struct {
	// 注文番号
	// sendorderのレスポンスで受け取るOrderID。
	OrderId string `json:"OrderId"`
	// 注文パスワード
	Password string `json:"Password"`
}

// RequestRegister is definition of RequestRegister.
type RequestRegister struct {
	Symbols []SymbolsItem `json:"Symbols"`
}

// SymbolsItem is definition of SymbolsItem.
type SymbolsItem struct {
	// 銘柄コード
	Symbol *string `json:"Symbol"`
	// 市場コード
	// |定義値|説明  |
	// |------|------|
	// |1     |東証  |
	// |3     |名証  |
	// |5     |福証  |
	// |6     |札証  |
	// |2     |日通し|
	// |23    |日中  |
	// |24    |夜間  |
	Exchange *SymbolsItemExchange `json:"Exchange"`
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |1     |東証  |
// |3     |名証  |
// |5     |福証  |
// |6     |札証  |
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type SymbolsItemExchange int32

const (
	// |1|東証|
	SymbolsItemExchange東証 SymbolsItemExchange = 1
	// |3|名証|
	SymbolsItemExchange名証 SymbolsItemExchange = 3
	// |5|福証|
	SymbolsItemExchange福証 SymbolsItemExchange = 5
	// |6|札証|
	SymbolsItemExchange札証 SymbolsItemExchange = 6
	// |2|日通し|
	SymbolsItemExchange日通し SymbolsItemExchange = 2
	// |23|日中|
	SymbolsItemExchange日中 SymbolsItemExchange = 23
	// |24|夜間|
	SymbolsItemExchange夜間 SymbolsItemExchange = 24
)

// P returns pointer of SymbolsItemExchange.
func (e SymbolsItemExchange) P() *SymbolsItemExchange {
	v := e
	return &v
}

// TokenSuccess is definition of TokenSuccess.
type TokenSuccess struct {
	// 結果コード
	// 0が成功。それ以外はエラーコード。
	ResultCode *int32 `json:"ResultCode"`
	// APIトークン
	Token *string `json:"Token"`
}

// OrderSuccess is definition of OrderSuccess.
type OrderSuccess struct {
	// 結果コード
	// 0が成功。それ以外はエラーコード。
	Result *int32 `json:"Result"`
	// 受付注文番号
	OrderId *string `json:"OrderId"`
}

// WalletCashSuccess is definition of WalletCashSuccess.
type WalletCashSuccess struct {
	// 現物買付可能額
	StockAccountWallet *float64 `json:"StockAccountWallet"`
}

// WalletMarginSuccess is definition of WalletMarginSuccess.
type WalletMarginSuccess struct {
	// 信用新規可能額
	MarginAccountWallet *float64 `json:"MarginAccountWallet"`
	// 保証金維持率
	// ※銘柄指定の場合のみ
	// ※銘柄が指定されなかった場合、0.0を返す。
	DepositkeepRate *float64 `json:"DepositkeepRate"`
	// 委託保証金率
	// ※銘柄指定の場合のみ。
	// ※銘柄が指定されなかった場合、Noneを返す。
	ConsignmentDepositRate *float64 `json:"ConsignmentDepositRate"`
	// 現金委託保証金率
	// ※銘柄指定の場合のみ。
	// ※銘柄が指定されなかった場合、Noneを返す。
	CashOfConsignmentDepositRate *float64 `json:"CashOfConsignmentDepositRate"`
}

// WalletFutureSuccess is definition of WalletFutureSuccess.
type WalletFutureSuccess struct {
	// 新規建玉可能額
	FutureTradeLimit *float64 `json:"FutureTradeLimit"`
	// 必要証拠金額
	// ※銘柄指定の場合のみ。
	// ※銘柄が指定されなかった場合、空を返す。
	MarginRequirement *float64 `json:"MarginRequirement"`
}

// WalletOptionSuccess is definition of WalletOptionSuccess.
type WalletOptionSuccess struct {
	// 買新規建玉可能額
	OptionBuyTradeLimit *float64 `json:"OptionBuyTradeLimit"`
	// 売新規建玉可能額
	OptionSellTradeLimit *float64 `json:"OptionSellTradeLimit"`
	// 必要証拠金額
	// ※銘柄指定の場合のみ。
	// ※銘柄が指定されなかった場合、空を返す。
	MarginRequirement *float64 `json:"MarginRequirement"`
}

// BoardSuccess is definition of BoardSuccess.
// 下記にあるBIDとASKとは、トレーダー目線から見た場合の値であるため、BidPrice=Sell1のPrice、AskPrice=Buy1のPriceという数値となります。
type BoardSuccess struct {
	// 銘柄コード
	Symbol *string `json:"Symbol"`
	// 銘柄名
	SymbolName *string `json:"SymbolName"`
	// 市場コード
	// ※株式・先物・オプション銘柄の場合のみ
	// |定義値|説明  |
	// |------|------|
	// |1     |東証  |
	// |3     |名証  |
	// |5     |福証  |
	// |6     |札証  |
	// |2     |日通し|
	// |23    |日中  |
	// |24    |夜間  |
	Exchange *BoardSuccessExchange `json:"Exchange"`
	// 市場名称
	// ※株式・先物・オプション銘柄の場合のみ
	ExchangeName *string `json:"ExchangeName"`
	// 現値
	CurrentPrice *float64 `json:"CurrentPrice"`
	// 現値時刻
	CurrentPriceTime *string `json:"CurrentPriceTime"`
	// 現値前値比較
	// |定義値|説明                              |
	// |------|----------------------------------|
	// |0000  |事象なし                          |
	// |0056  |変わらず                          |
	// |0057  |UP                                |
	// |0058  |DOWN                              |
	// |0059  |中断板寄り後の初値                |
	// |0060  |ザラバ引け                        |
	// |0061  |板寄り引け                        |
	// |0062  |中断引け                          |
	// |0063  |ダウン引け                        |
	// |0064  |逆転終値                          |
	// |0066  |特別気配引け                      |
	// |0067  |一時留保引け                      |
	// |0068  |売買停止引け                      |
	// |0069  |サーキットブレーカ引け            |
	// |0431  |ダイナミックサーキットブレーカ引け|
	CurrentPriceChangeStatus *BoardSuccessCurrentPriceChangeStatus `json:"CurrentPriceChangeStatus"`
	// 現値ステータス
	// |定義値|説明                              |
	// |------|----------------------------------|
	// |1     |現値                              |
	// |2     |不連続歩み                        |
	// |3     |板寄せ                            |
	// |4     |システム障害                      |
	// |5     |中断                              |
	// |6     |売買停止                          |
	// |7     |売買停止・システム停止解除        |
	// |8     |終値                              |
	// |9     |システム停止                      |
	// |10    |概算値                            |
	// |11    |参考値                            |
	// |12    |サーキットブレイク実施中          |
	// |13    |システム障害解除                  |
	// |14    |サーキットブレイク解除            |
	// |15    |中断解除                          |
	// |16    |一時留保中                        |
	// |17    |一時留保解除                      |
	// |18    |ファイル障害                      |
	// |19    |ファイル障害解除                  |
	// |20    |Spread/Strategy                   |
	// |21    |ダイナミックサーキットブレイク発動|
	// |22    |ダイナミックサーキットブレイク解除|
	// |23    |板寄せ約定                        |
	CurrentPriceStatus *BoardSuccessCurrentPriceStatus `json:"CurrentPriceStatus"`
	// 計算用現値
	CalcPrice *float64 `json:"CalcPrice"`
	// 前日終値
	PreviousClose *float64 `json:"PreviousClose"`
	// 前日終値日付
	PreviousCloseTime *string `json:"PreviousCloseTime"`
	// 前日比
	ChangePreviousClose *float64 `json:"ChangePreviousClose"`
	// 騰落率
	ChangePreviousClosePer *float64 `json:"ChangePreviousClosePer"`
	// 始値
	OpeningPrice *float64 `json:"OpeningPrice"`
	// 始値時刻
	OpeningPriceTime *string `json:"OpeningPriceTime"`
	// 高値
	HighPrice *float64 `json:"HighPrice"`
	// 高値時刻
	HighPriceTime *string `json:"HighPriceTime"`
	// 安値
	LowPrice *float64 `json:"LowPrice"`
	// 安値時刻
	LowPriceTime *string `json:"LowPriceTime"`
	// 売買高
	// ※株式・先物・オプション銘柄の場合のみ
	TradingVolume *float64 `json:"TradingVolume"`
	// 売買高時刻
	// ※株式・先物・オプション銘柄の場合のみ
	TradingVolumeTime *string `json:"TradingVolumeTime"`
	// 売買高加重平均価格（VWAP）
	// ※株式・先物・オプション銘柄の場合のみ
	VWAP *float64 `json:"VWAP"`
	// 売買代金
	// ※株式・先物・オプション銘柄の場合のみ
	TradingValue *float64 `json:"TradingValue"`
	// 最良売気配数量
	// ※株式・先物・オプション銘柄の場合のみ
	BidQty *float64 `json:"BidQty"`
	// 最良売気配値段
	// ※株式・先物・オプション銘柄の場合のみ
	BidPrice *float64 `json:"BidPrice"`
	// 最良売気配時刻
	// ※株式銘柄の場合のみ
	BidTime *string `json:"BidTime"`
	// 最良売気配フラグ
	// ※株式・先物・オプション銘柄の場合のみ
	// |定義値|説明                        |
	// |------|----------------------------|
	// |0000  |事象なし                    |
	// |0101  |一般気配                    |
	// |0102  |特別気配                    |
	// |0103  |注意気配                    |
	// |0107  |寄前気配                    |
	// |0108  |停止前特別気配              |
	// |0109  |引け後気配                  |
	// |0116  |寄前気配約定成立ポイントなし|
	// |0117  |寄前気配約定成立ポイントあり|
	// |0118  |連続約定気配                |
	// |0119  |停止前の連続約定気配        |
	// |0120  |買い上がり売り下がり中      |
	BidSign *BoardSuccessBidSign `json:"BidSign"`
	// 売成行数量
	// ※株式銘柄の場合のみ
	MarketOrderSellQty *float64 `json:"MarketOrderSellQty"`
	// 売気配数量1本目
	Sell1 *Sell1 `json:"Sell1"`
	// 売気配数量2本目
	Sell2 *Sell2 `json:"Sell2"`
	// 売気配数量3本目
	Sell3 *Sell3 `json:"Sell3"`
	// 売気配数量4本目
	Sell4 *Sell4 `json:"Sell4"`
	// 売気配数量5本目
	Sell5 *Sell5 `json:"Sell5"`
	// 売気配数量6本目
	Sell6 *Sell6 `json:"Sell6"`
	// 売気配数量7本目
	Sell7 *Sell7 `json:"Sell7"`
	// 売気配数量8本目
	Sell8 *Sell8 `json:"Sell8"`
	// 売気配数量9本目
	Sell9 *Sell9 `json:"Sell9"`
	// 売気配数量10本目
	Sell10 *Sell10 `json:"Sell10"`
	// 最良買気配数量
	// ※株式・先物・オプション銘柄の場合のみ
	AskQty *float64 `json:"AskQty"`
	// 最良買気配値段
	// ※株式・先物・オプション銘柄の場合のみ
	AskPrice *float64 `json:"AskPrice"`
	// 最良買気配時刻
	// ※株式銘柄の場合のみ
	AskTime *string `json:"AskTime"`
	// 最良買気配フラグ
	// ※株式・先物・オプション銘柄の場合のみ
	// |定義値|説明                        |
	// |------|----------------------------|
	// |0000  |事象なし                    |
	// |0101  |一般気配                    |
	// |0102  |特別気配                    |
	// |0103  |注意気配                    |
	// |0107  |寄前気配                    |
	// |0108  |停止前特別気配              |
	// |0109  |引け後気配                  |
	// |0116  |寄前気配約定成立ポイントなし|
	// |0117  |寄前気配約定成立ポイントあり|
	// |0118  |連続約定気配                |
	// |0119  |停止前の連続約定気配        |
	// |0120  |買い上がり売り下がり中      |
	AskSign *BoardSuccessAskSign `json:"AskSign"`
	// 買成行数量
	// ※株式銘柄の場合のみ
	MarketOrderBuyQty *float64 `json:"MarketOrderBuyQty"`
	// 買気配数量1本目
	Buy1 *Buy1 `json:"Buy1"`
	// 買気配数量2本目
	Buy2 *Buy2 `json:"Buy2"`
	// 買気配数量3本目
	Buy3 *Buy3 `json:"Buy3"`
	// 買気配数量4本目
	Buy4 *Buy4 `json:"Buy4"`
	// 買気配数量5本目
	Buy5 *Buy5 `json:"Buy5"`
	// 買気配数量6本目
	Buy6 *Buy6 `json:"Buy6"`
	// 買気配数量7本目
	Buy7 *Buy7 `json:"Buy7"`
	// 買気配数量8本目
	Buy8 *Buy8 `json:"Buy8"`
	// 買気配数量9本目
	Buy9 *Buy9 `json:"Buy9"`
	// 買気配数量10本目
	Buy10 *Buy10 `json:"Buy10"`
	// OVER気配数量
	// ※株式銘柄の場合のみ
	OverSellQty *float64 `json:"OverSellQty"`
	// UNDER気配数量
	// ※株式銘柄の場合のみ
	UnderBuyQty *float64 `json:"UnderBuyQty"`
	// 時価総額
	// ※株式銘柄の場合のみ
	TotalMarketValue *float64 `json:"TotalMarketValue"`
	// 清算値
	// ※先物銘柄の場合のみ
	ClearingPrice *float64 `json:"ClearingPrice"`
	// インプライド・ボラティリティ
	// ※オプション銘柄かつ日通しの場合のみ
	IV *float64 `json:"IV"`
	// ガンマ
	// ※オプション銘柄かつ日通しの場合のみ
	Gamma *float64 `json:"Gamma"`
	// セータ
	// ※オプション銘柄かつ日通しの場合のみ
	Theta *float64 `json:"Theta"`
	// ベガ
	// ※オプション銘柄かつ日通しの場合のみ
	Vega *float64 `json:"Vega"`
	// デルタ
	// ※オプション銘柄かつ日通しの場合のみ
	Delta *float64 `json:"Delta"`
}

// 市場コード
// ※株式・先物・オプション銘柄の場合のみ
// |定義値|説明  |
// |------|------|
// |1     |東証  |
// |3     |名証  |
// |5     |福証  |
// |6     |札証  |
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type BoardSuccessExchange int32

const (
	// |1|東証|
	BoardSuccessExchange東証 BoardSuccessExchange = 1
	// |3|名証|
	BoardSuccessExchange名証 BoardSuccessExchange = 3
	// |5|福証|
	BoardSuccessExchange福証 BoardSuccessExchange = 5
	// |6|札証|
	BoardSuccessExchange札証 BoardSuccessExchange = 6
	// |2|日通し|
	BoardSuccessExchange日通し BoardSuccessExchange = 2
	// |23|日中|
	BoardSuccessExchange日中 BoardSuccessExchange = 23
	// |24|夜間|
	BoardSuccessExchange夜間 BoardSuccessExchange = 24
)

// P returns pointer of BoardSuccessExchange.
func (e BoardSuccessExchange) P() *BoardSuccessExchange {
	v := e
	return &v
}

// 現値前値比較
// |定義値|説明                              |
// |------|----------------------------------|
// |0000  |事象なし                          |
// |0056  |変わらず                          |
// |0057  |UP                                |
// |0058  |DOWN                              |
// |0059  |中断板寄り後の初値                |
// |0060  |ザラバ引け                        |
// |0061  |板寄り引け                        |
// |0062  |中断引け                          |
// |0063  |ダウン引け                        |
// |0064  |逆転終値                          |
// |0066  |特別気配引け                      |
// |0067  |一時留保引け                      |
// |0068  |売買停止引け                      |
// |0069  |サーキットブレーカ引け            |
// |0431  |ダイナミックサーキットブレーカ引け|
type BoardSuccessCurrentPriceChangeStatus string

const (
	// |0000|事象なし|
	BoardSuccessCurrentPriceChangeStatus事象なし BoardSuccessCurrentPriceChangeStatus = "0000"
	// |0056|変わらず|
	BoardSuccessCurrentPriceChangeStatus変わらず BoardSuccessCurrentPriceChangeStatus = "0056"
	// |0057|UP|
	BoardSuccessCurrentPriceChangeStatusUP BoardSuccessCurrentPriceChangeStatus = "0057"
	// |0058|DOWN|
	BoardSuccessCurrentPriceChangeStatusDOWN BoardSuccessCurrentPriceChangeStatus = "0058"
	// |0059|中断板寄り後の初値|
	BoardSuccessCurrentPriceChangeStatus中断板寄り後の初値 BoardSuccessCurrentPriceChangeStatus = "0059"
	// |0060|ザラバ引け|
	BoardSuccessCurrentPriceChangeStatusザラバ引け BoardSuccessCurrentPriceChangeStatus = "0060"
	// |0061|板寄り引け|
	BoardSuccessCurrentPriceChangeStatus板寄り引け BoardSuccessCurrentPriceChangeStatus = "0061"
	// |0062|中断引け|
	BoardSuccessCurrentPriceChangeStatus中断引け BoardSuccessCurrentPriceChangeStatus = "0062"
	// |0063|ダウン引け|
	BoardSuccessCurrentPriceChangeStatusダウン引け BoardSuccessCurrentPriceChangeStatus = "0063"
	// |0064|逆転終値|
	BoardSuccessCurrentPriceChangeStatus逆転終値 BoardSuccessCurrentPriceChangeStatus = "0064"
	// |0066|特別気配引け|
	BoardSuccessCurrentPriceChangeStatus特別気配引け BoardSuccessCurrentPriceChangeStatus = "0066"
	// |0067|一時留保引け|
	BoardSuccessCurrentPriceChangeStatus一時留保引け BoardSuccessCurrentPriceChangeStatus = "0067"
	// |0068|売買停止引け|
	BoardSuccessCurrentPriceChangeStatus売買停止引け BoardSuccessCurrentPriceChangeStatus = "0068"
	// |0069|サーキットブレーカ引け|
	BoardSuccessCurrentPriceChangeStatusサーキットブレーカ引け BoardSuccessCurrentPriceChangeStatus = "0069"
	// |0431|ダイナミックサーキットブレーカ引け|
	BoardSuccessCurrentPriceChangeStatusダイナミックサーキットブレーカ引け BoardSuccessCurrentPriceChangeStatus = "0431"
)

// P returns pointer of BoardSuccessCurrentPriceChangeStatus.
func (e BoardSuccessCurrentPriceChangeStatus) P() *BoardSuccessCurrentPriceChangeStatus {
	v := e
	return &v
}

// 現値ステータス
// |定義値|説明                              |
// |------|----------------------------------|
// |1     |現値                              |
// |2     |不連続歩み                        |
// |3     |板寄せ                            |
// |4     |システム障害                      |
// |5     |中断                              |
// |6     |売買停止                          |
// |7     |売買停止・システム停止解除        |
// |8     |終値                              |
// |9     |システム停止                      |
// |10    |概算値                            |
// |11    |参考値                            |
// |12    |サーキットブレイク実施中          |
// |13    |システム障害解除                  |
// |14    |サーキットブレイク解除            |
// |15    |中断解除                          |
// |16    |一時留保中                        |
// |17    |一時留保解除                      |
// |18    |ファイル障害                      |
// |19    |ファイル障害解除                  |
// |20    |Spread/Strategy                   |
// |21    |ダイナミックサーキットブレイク発動|
// |22    |ダイナミックサーキットブレイク解除|
// |23    |板寄せ約定                        |
type BoardSuccessCurrentPriceStatus int32

const (
	// |1|現値|
	BoardSuccessCurrentPriceStatus現値 BoardSuccessCurrentPriceStatus = 1
	// |2|不連続歩み|
	BoardSuccessCurrentPriceStatus不連続歩み BoardSuccessCurrentPriceStatus = 2
	// |3|板寄せ|
	BoardSuccessCurrentPriceStatus板寄せ BoardSuccessCurrentPriceStatus = 3
	// |4|システム障害|
	BoardSuccessCurrentPriceStatusシステム障害 BoardSuccessCurrentPriceStatus = 4
	// |5|中断|
	BoardSuccessCurrentPriceStatus中断 BoardSuccessCurrentPriceStatus = 5
	// |6|売買停止|
	BoardSuccessCurrentPriceStatus売買停止 BoardSuccessCurrentPriceStatus = 6
	// |7|売買停止・システム停止解除|
	BoardSuccessCurrentPriceStatus売買停止_システム停止解除 BoardSuccessCurrentPriceStatus = 7
	// |8|終値|
	BoardSuccessCurrentPriceStatus終値 BoardSuccessCurrentPriceStatus = 8
	// |9|システム停止|
	BoardSuccessCurrentPriceStatusシステム停止 BoardSuccessCurrentPriceStatus = 9
	// |10|概算値|
	BoardSuccessCurrentPriceStatus概算値 BoardSuccessCurrentPriceStatus = 10
	// |11|参考値|
	BoardSuccessCurrentPriceStatus参考値 BoardSuccessCurrentPriceStatus = 11
	// |12|サーキットブレイク実施中|
	BoardSuccessCurrentPriceStatusサーキットブレイク実施中 BoardSuccessCurrentPriceStatus = 12
	// |13|システム障害解除|
	BoardSuccessCurrentPriceStatusシステム障害解除 BoardSuccessCurrentPriceStatus = 13
	// |14|サーキットブレイク解除|
	BoardSuccessCurrentPriceStatusサーキットブレイク解除 BoardSuccessCurrentPriceStatus = 14
	// |15|中断解除|
	BoardSuccessCurrentPriceStatus中断解除 BoardSuccessCurrentPriceStatus = 15
	// |16|一時留保中|
	BoardSuccessCurrentPriceStatus一時留保中 BoardSuccessCurrentPriceStatus = 16
	// |17|一時留保解除|
	BoardSuccessCurrentPriceStatus一時留保解除 BoardSuccessCurrentPriceStatus = 17
	// |18|ファイル障害|
	BoardSuccessCurrentPriceStatusファイル障害 BoardSuccessCurrentPriceStatus = 18
	// |19|ファイル障害解除|
	BoardSuccessCurrentPriceStatusファイル障害解除 BoardSuccessCurrentPriceStatus = 19
	// |20|Spread/Strategy|
	BoardSuccessCurrentPriceStatusSpread_Strategy BoardSuccessCurrentPriceStatus = 20
	// |21|ダイナミックサーキットブレイク発動|
	BoardSuccessCurrentPriceStatusダイナミックサーキットブレイク発動 BoardSuccessCurrentPriceStatus = 21
	// |22|ダイナミックサーキットブレイク解除|
	BoardSuccessCurrentPriceStatusダイナミックサーキットブレイク解除 BoardSuccessCurrentPriceStatus = 22
	// |23|板寄せ約定|
	BoardSuccessCurrentPriceStatus板寄せ約定 BoardSuccessCurrentPriceStatus = 23
)

// P returns pointer of BoardSuccessCurrentPriceStatus.
func (e BoardSuccessCurrentPriceStatus) P() *BoardSuccessCurrentPriceStatus {
	v := e
	return &v
}

// 最良売気配フラグ
// ※株式・先物・オプション銘柄の場合のみ
// |定義値|説明                        |
// |------|----------------------------|
// |0000  |事象なし                    |
// |0101  |一般気配                    |
// |0102  |特別気配                    |
// |0103  |注意気配                    |
// |0107  |寄前気配                    |
// |0108  |停止前特別気配              |
// |0109  |引け後気配                  |
// |0116  |寄前気配約定成立ポイントなし|
// |0117  |寄前気配約定成立ポイントあり|
// |0118  |連続約定気配                |
// |0119  |停止前の連続約定気配        |
// |0120  |買い上がり売り下がり中      |
type BoardSuccessBidSign string

const (
	// |0000|事象なし|
	BoardSuccessBidSign事象なし BoardSuccessBidSign = "0000"
	// |0101|一般気配|
	BoardSuccessBidSign一般気配 BoardSuccessBidSign = "0101"
	// |0102|特別気配|
	BoardSuccessBidSign特別気配 BoardSuccessBidSign = "0102"
	// |0103|注意気配|
	BoardSuccessBidSign注意気配 BoardSuccessBidSign = "0103"
	// |0107|寄前気配|
	BoardSuccessBidSign寄前気配 BoardSuccessBidSign = "0107"
	// |0108|停止前特別気配|
	BoardSuccessBidSign停止前特別気配 BoardSuccessBidSign = "0108"
	// |0109|引け後気配|
	BoardSuccessBidSign引け後気配 BoardSuccessBidSign = "0109"
	// |0116|寄前気配約定成立ポイントなし|
	BoardSuccessBidSign寄前気配約定成立ポイントなし BoardSuccessBidSign = "0116"
	// |0117|寄前気配約定成立ポイントあり|
	BoardSuccessBidSign寄前気配約定成立ポイントあり BoardSuccessBidSign = "0117"
	// |0118|連続約定気配|
	BoardSuccessBidSign連続約定気配 BoardSuccessBidSign = "0118"
	// |0119|停止前の連続約定気配|
	BoardSuccessBidSign停止前の連続約定気配 BoardSuccessBidSign = "0119"
	// |0120|買い上がり売り下がり中|
	BoardSuccessBidSign買い上がり売り下がり中 BoardSuccessBidSign = "0120"
)

// P returns pointer of BoardSuccessBidSign.
func (e BoardSuccessBidSign) P() *BoardSuccessBidSign {
	v := e
	return &v
}

// 最良買気配フラグ
// ※株式・先物・オプション銘柄の場合のみ
// |定義値|説明                        |
// |------|----------------------------|
// |0000  |事象なし                    |
// |0101  |一般気配                    |
// |0102  |特別気配                    |
// |0103  |注意気配                    |
// |0107  |寄前気配                    |
// |0108  |停止前特別気配              |
// |0109  |引け後気配                  |
// |0116  |寄前気配約定成立ポイントなし|
// |0117  |寄前気配約定成立ポイントあり|
// |0118  |連続約定気配                |
// |0119  |停止前の連続約定気配        |
// |0120  |買い上がり売り下がり中      |
type BoardSuccessAskSign string

const (
	// |0000|事象なし|
	BoardSuccessAskSign事象なし BoardSuccessAskSign = "0000"
	// |0101|一般気配|
	BoardSuccessAskSign一般気配 BoardSuccessAskSign = "0101"
	// |0102|特別気配|
	BoardSuccessAskSign特別気配 BoardSuccessAskSign = "0102"
	// |0103|注意気配|
	BoardSuccessAskSign注意気配 BoardSuccessAskSign = "0103"
	// |0107|寄前気配|
	BoardSuccessAskSign寄前気配 BoardSuccessAskSign = "0107"
	// |0108|停止前特別気配|
	BoardSuccessAskSign停止前特別気配 BoardSuccessAskSign = "0108"
	// |0109|引け後気配|
	BoardSuccessAskSign引け後気配 BoardSuccessAskSign = "0109"
	// |0116|寄前気配約定成立ポイントなし|
	BoardSuccessAskSign寄前気配約定成立ポイントなし BoardSuccessAskSign = "0116"
	// |0117|寄前気配約定成立ポイントあり|
	BoardSuccessAskSign寄前気配約定成立ポイントあり BoardSuccessAskSign = "0117"
	// |0118|連続約定気配|
	BoardSuccessAskSign連続約定気配 BoardSuccessAskSign = "0118"
	// |0119|停止前の連続約定気配|
	BoardSuccessAskSign停止前の連続約定気配 BoardSuccessAskSign = "0119"
	// |0120|買い上がり売り下がり中|
	BoardSuccessAskSign買い上がり売り下がり中 BoardSuccessAskSign = "0120"
)

// P returns pointer of BoardSuccessAskSign.
func (e BoardSuccessAskSign) P() *BoardSuccessAskSign {
	v := e
	return &v
}

// Sell1 is definition of Sell1.
// 売気配数量1本目
type Sell1 struct {
	// 時刻
	// ※株式銘柄の場合のみ
	Time *string `json:"Time"`
	// 気配フラグ
	// ※株式・先物・オプション銘柄の場合のみ
	// |定義値|説明                        |
	// |------|----------------------------|
	// |0000  |事象なし                    |
	// |0101  |一般気配                    |
	// |0102  |特別気配                    |
	// |0103  |注意気配                    |
	// |0107  |寄前気配                    |
	// |0108  |停止前特別気配              |
	// |0109  |引け後気配                  |
	// |0116  |寄前気配約定成立ポイントなし|
	// |0117  |寄前気配約定成立ポイントあり|
	// |0118  |連続約定気配                |
	// |0119  |停止前の連続約定気配        |
	// |0120  |買い上がり売り下がり中      |
	Sign *Sell1Sign `json:"Sign"`
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// 気配フラグ
// ※株式・先物・オプション銘柄の場合のみ
// |定義値|説明                        |
// |------|----------------------------|
// |0000  |事象なし                    |
// |0101  |一般気配                    |
// |0102  |特別気配                    |
// |0103  |注意気配                    |
// |0107  |寄前気配                    |
// |0108  |停止前特別気配              |
// |0109  |引け後気配                  |
// |0116  |寄前気配約定成立ポイントなし|
// |0117  |寄前気配約定成立ポイントあり|
// |0118  |連続約定気配                |
// |0119  |停止前の連続約定気配        |
// |0120  |買い上がり売り下がり中      |
type Sell1Sign string

const (
	// |0000|事象なし|
	Sell1Sign事象なし Sell1Sign = "0000"
	// |0101|一般気配|
	Sell1Sign一般気配 Sell1Sign = "0101"
	// |0102|特別気配|
	Sell1Sign特別気配 Sell1Sign = "0102"
	// |0103|注意気配|
	Sell1Sign注意気配 Sell1Sign = "0103"
	// |0107|寄前気配|
	Sell1Sign寄前気配 Sell1Sign = "0107"
	// |0108|停止前特別気配|
	Sell1Sign停止前特別気配 Sell1Sign = "0108"
	// |0109|引け後気配|
	Sell1Sign引け後気配 Sell1Sign = "0109"
	// |0116|寄前気配約定成立ポイントなし|
	Sell1Sign寄前気配約定成立ポイントなし Sell1Sign = "0116"
	// |0117|寄前気配約定成立ポイントあり|
	Sell1Sign寄前気配約定成立ポイントあり Sell1Sign = "0117"
	// |0118|連続約定気配|
	Sell1Sign連続約定気配 Sell1Sign = "0118"
	// |0119|停止前の連続約定気配|
	Sell1Sign停止前の連続約定気配 Sell1Sign = "0119"
	// |0120|買い上がり売り下がり中|
	Sell1Sign買い上がり売り下がり中 Sell1Sign = "0120"
)

// P returns pointer of Sell1Sign.
func (e Sell1Sign) P() *Sell1Sign {
	v := e
	return &v
}

// Sell2 is definition of Sell2.
// 売気配数量2本目
type Sell2 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Sell3 is definition of Sell3.
// 売気配数量3本目
type Sell3 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Sell4 is definition of Sell4.
// 売気配数量4本目
type Sell4 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Sell5 is definition of Sell5.
// 売気配数量5本目
type Sell5 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Sell6 is definition of Sell6.
// 売気配数量6本目
type Sell6 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Sell7 is definition of Sell7.
// 売気配数量7本目
type Sell7 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Sell8 is definition of Sell8.
// 売気配数量8本目
type Sell8 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Sell9 is definition of Sell9.
// 売気配数量9本目
type Sell9 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Sell10 is definition of Sell10.
// 売気配数量10本目
type Sell10 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy1 is definition of Buy1.
// 買気配数量1本目
type Buy1 struct {
	// 時刻
	// ※株式銘柄の場合のみ
	Time *string `json:"Time"`
	// 気配フラグ
	// ※株式・先物・オプション銘柄の場合のみ
	// |定義値|説明                        |
	// |------|----------------------------|
	// |0000  |事象なし                    |
	// |0101  |一般気配                    |
	// |0102  |特別気配                    |
	// |0103  |注意気配                    |
	// |0107  |寄前気配                    |
	// |0108  |停止前特別気配              |
	// |0109  |引け後気配                  |
	// |0116  |寄前気配約定成立ポイントなし|
	// |0117  |寄前気配約定成立ポイントあり|
	// |0118  |連続約定気配                |
	// |0119  |停止前の連続約定気配        |
	// |0120  |買い上がり売り下がり中      |
	Sign *Buy1Sign `json:"Sign"`
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// 気配フラグ
// ※株式・先物・オプション銘柄の場合のみ
// |定義値|説明                        |
// |------|----------------------------|
// |0000  |事象なし                    |
// |0101  |一般気配                    |
// |0102  |特別気配                    |
// |0103  |注意気配                    |
// |0107  |寄前気配                    |
// |0108  |停止前特別気配              |
// |0109  |引け後気配                  |
// |0116  |寄前気配約定成立ポイントなし|
// |0117  |寄前気配約定成立ポイントあり|
// |0118  |連続約定気配                |
// |0119  |停止前の連続約定気配        |
// |0120  |買い上がり売り下がり中      |
type Buy1Sign string

const (
	// |0000|事象なし|
	Buy1Sign事象なし Buy1Sign = "0000"
	// |0101|一般気配|
	Buy1Sign一般気配 Buy1Sign = "0101"
	// |0102|特別気配|
	Buy1Sign特別気配 Buy1Sign = "0102"
	// |0103|注意気配|
	Buy1Sign注意気配 Buy1Sign = "0103"
	// |0107|寄前気配|
	Buy1Sign寄前気配 Buy1Sign = "0107"
	// |0108|停止前特別気配|
	Buy1Sign停止前特別気配 Buy1Sign = "0108"
	// |0109|引け後気配|
	Buy1Sign引け後気配 Buy1Sign = "0109"
	// |0116|寄前気配約定成立ポイントなし|
	Buy1Sign寄前気配約定成立ポイントなし Buy1Sign = "0116"
	// |0117|寄前気配約定成立ポイントあり|
	Buy1Sign寄前気配約定成立ポイントあり Buy1Sign = "0117"
	// |0118|連続約定気配|
	Buy1Sign連続約定気配 Buy1Sign = "0118"
	// |0119|停止前の連続約定気配|
	Buy1Sign停止前の連続約定気配 Buy1Sign = "0119"
	// |0120|買い上がり売り下がり中|
	Buy1Sign買い上がり売り下がり中 Buy1Sign = "0120"
)

// P returns pointer of Buy1Sign.
func (e Buy1Sign) P() *Buy1Sign {
	v := e
	return &v
}

// Buy2 is definition of Buy2.
// 買気配数量2本目
type Buy2 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy3 is definition of Buy3.
// 買気配数量3本目
type Buy3 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy4 is definition of Buy4.
// 買気配数量4本目
type Buy4 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy5 is definition of Buy5.
// 買気配数量5本目
type Buy5 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy6 is definition of Buy6.
// 買気配数量6本目
type Buy6 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy7 is definition of Buy7.
// 買気配数量7本目
type Buy7 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy8 is definition of Buy8.
// 買気配数量8本目
type Buy8 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy9 is definition of Buy9.
// 買気配数量9本目
type Buy9 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// Buy10 is definition of Buy10.
// 買気配数量10本目
type Buy10 struct {
	// 値段
	// ※株式・先物・オプション銘柄の場合のみ
	Price *float64 `json:"Price"`
	// 数量
	// ※株式・先物・オプション銘柄の場合のみ
	Qty *float64 `json:"Qty"`
}

// RegistSuccess is definition of RegistSuccess.
type RegistSuccess struct {
	// 現在登録されている銘柄のリスト
	RegistList []RegistListItem `json:"RegistList"`
}

// RegistListItem is definition of RegistListItem.
type RegistListItem struct {
	// 銘柄コード
	Symbol *string `json:"Symbol"`
	// 市場コード
	// |定義値|説明  |
	// |------|------|
	// |1     |東証  |
	// |3     |名証  |
	// |5     |福証  |
	// |6     |札証  |
	// |2     |日通し|
	// |23    |日中  |
	// |24    |夜間  |
	Exchange *RegistListItemExchange `json:"Exchange"`
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |1     |東証  |
// |3     |名証  |
// |5     |福証  |
// |6     |札証  |
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type RegistListItemExchange int32

const (
	// |1|東証|
	RegistListItemExchange東証 RegistListItemExchange = 1
	// |3|名証|
	RegistListItemExchange名証 RegistListItemExchange = 3
	// |5|福証|
	RegistListItemExchange福証 RegistListItemExchange = 5
	// |6|札証|
	RegistListItemExchange札証 RegistListItemExchange = 6
	// |2|日通し|
	RegistListItemExchange日通し RegistListItemExchange = 2
	// |23|日中|
	RegistListItemExchange日中 RegistListItemExchange = 23
	// |24|夜間|
	RegistListItemExchange夜間 RegistListItemExchange = 24
)

// P returns pointer of RegistListItemExchange.
func (e RegistListItemExchange) P() *RegistListItemExchange {
	v := e
	return &v
}

// UnregisterAllSuccess is definition of UnregisterAllSuccess.
type UnregisterAllSuccess struct {
	// 現在登録されている銘柄のリスト
	// ※銘柄登録解除が正常に行われれば、空リストを返します。
	// 　登録解除でエラー等が発生した場合、現在登録されている銘柄のリストを返します
	RegistList []RegistListItem `json:"RegistList"`
}

// SymbolSuccess is definition of SymbolSuccess.
type SymbolSuccess struct {
	// 銘柄コード
	Symbol *string `json:"Symbol"`
	// 銘柄名
	SymbolName *string `json:"SymbolName"`
	// 銘柄略称
	// ※株式・先物・オプション銘柄の場合のみ
	DisplayName *string `json:"DisplayName"`
	// 市場コード
	// ※株式・先物・オプション銘柄の場合のみ
	// |定義値|説明  |
	// |------|------|
	// |1     |東証  |
	// |3     |名証  |
	// |5     |福証  |
	// |6     |札証  |
	// |2     |日通し|
	// |23    |日中  |
	// |24    |夜間  |
	Exchange *SymbolSuccessExchange `json:"Exchange"`
	// 市場名称
	// ※株式・先物・オプション銘柄の場合のみ
	ExchangeName *string `json:"ExchangeName"`
	// 業種コード名
	// ※株式銘柄の場合のみ
	// |定義値|説明                |
	// |------|--------------------|
	// |0050  |水産・農林業        |
	// |1050  |鉱業                |
	// |2050  |建設業              |
	// |3050  |食料品              |
	// |3100  |繊維製品            |
	// |3150  |パルプ・紙          |
	// |3200  |化学                |
	// |3250  |医薬品              |
	// |3300  |石油・石炭製品      |
	// |3350  |ゴム製品            |
	// |3400  |ガラス・土石製品    |
	// |3450  |鉄鋼                |
	// |3500  |非鉄金属            |
	// |3550  |金属製品            |
	// |3600  |機械                |
	// |3650  |電気機器            |
	// |3700  |輸送用機器          |
	// |3750  |精密機器            |
	// |3800  |その他製品          |
	// |4050  |電気・ガス業        |
	// |5050  |陸運業              |
	// |5100  |海運業              |
	// |5150  |空運業              |
	// |5200  |倉庫・運輸関連業    |
	// |5250  |情報・通信業        |
	// |6050  |卸売業              |
	// |6100  |小売業              |
	// |7050  |銀行業              |
	// |7100  |証券、商品先物取引業|
	// |7150  |保険業              |
	// |7200  |その他金融業        |
	// |8050  |不動産業            |
	// |9050  |サービス業          |
	// |9999  |その他              |
	BisCategory *SymbolSuccessBisCategory `json:"BisCategory"`
	// 時価総額
	// ※株式銘柄の場合のみ
	TotalMarketValue *float64 `json:"TotalMarketValue"`
	// 発行済み株式数（千株）
	// ※株式銘柄の場合のみ
	TotalStocks *float64 `json:"TotalStocks"`
	// 売買単位
	// ※株式・先物・オプション銘柄の場合のみ
	TradingUnit *float64 `json:"TradingUnit"`
	// 決算期日
	// ※株式銘柄の場合のみ
	FiscalYearEndBasic *int32 `json:"FiscalYearEndBasic"`
	// 呼値グループ
	// ※株式・先物・オプション銘柄の場合のみ
	// |呼値コード|値段の水準    |呼値単位|
	// |----------|--------------|--------|
	// |10000     |3000円以下    |1       |
	// |10000     |5000円以下    |5       |
	// |10000     |30000円以下   |10      |
	// |10000     |50000円以下   |50      |
	// |10000     |300000円以下  |100     |
	// |10000     |500000円以下  |500     |
	// |10000     |3000000円以下 |1000    |
	// |10000     |5000000円以下 |5000    |
	// |10000     |30000000円以下|10000   |
	// |10000     |50000000円以下|50000   |
	// |10000     |50000000円超  |100000  |
	// |10003     |1000円以下    |0.1     |
	// |10003     |3000円以下    |0.5     |
	// |10003     |10000円以下   |1       |
	// |10003     |30000円以下   |5       |
	// |10003     |100000円以下  |10      |
	// |10003     |300000円以下  |50      |
	// |10003     |1000000円以下 |100     |
	// |10003     |3000000円以下 |500     |
	// |10003     |10000000円以下|1000    |
	// |10003     |30000000円以下|5000    |
	// |10003     |50000000円以下|10000   |
	// |10003     |50000000円超  |10000   |
	// |10118     |-             |10      |
	// |10119     |-             |5       |
	// |10318     |100円以下     |1       |
	// |10318     |1000円以下    |5       |
	// |10318     |1000円超      |10      |
	// |10706     |-             |0.25    |
	// |10718     |-             |0.5     |
	// |12122     |-             |5       |
	// |14473     |-             |1       |
	// |14515     |-             |0.05    |
	// |15411     |-             |1       |
	// |15569     |-             |0.5     |
	// |17163     |-             |0.5     |
	PriceRangeGroup *SymbolSuccessPriceRangeGroup `json:"PriceRangeGroup"`
	// 一般信用買建フラグ
	// ※trueのとき一般信用買建可能
	// ※株式銘柄の場合のみ
	KCMarginBuy *bool `json:"KCMarginBuy"`
	// 一般信用売建フラグ
	// ※trueのとき一般信用売建可能
	// ※株式銘柄の場合のみ
	KCMarginSell *bool `json:"KCMarginSell"`
	// 制度信用買建フラグ
	// ※trueのとき制度信用買建可能
	// ※株式銘柄の場合のみ
	MarginBuy *bool `json:"MarginBuy"`
	// 制度信用売建フラグ
	// ※trueのとき制度信用売建可能
	// ※株式銘柄の場合のみ
	MarginSell *bool `json:"MarginSell"`
	// 値幅上限
	// ※株式・先物・オプション銘柄の場合のみ
	UpperLimit *float64 `json:"UpperLimit"`
	// 値幅下限
	// ※株式・先物・オプション銘柄の場合のみ
	LowerLimit *float64 `json:"LowerLimit"`
	// 原資産コード
	// ※先物・オプション銘柄の場合のみ
	// |定義値      |説明        |
	// |------------|------------|
	// |NK225       |日経225     |
	// |NK300       |日経300     |
	// |MOTHERS     |東証マザーズ|
	// |JPX400      |JPX日経400  |
	// |TOPIX       |TOPIX       |
	// |NKVI        |日経平均VI  |
	// |DJIA        |NYダウ      |
	// |TSEREITINDEX|東証REIT指数|
	// |TOPIXCORE30 |TOPIX Core30|
	Underlyer *SymbolSuccessUnderlyer `json:"Underlyer"`
	// 限月-年月
	// ※「限月-年月」は「年(yyyy)/月(MM)」で表示します。
	// ※先物・オプション銘柄の場合のみ
	DerivMonth *string `json:"DerivMonth"`
	// 取引開始日
	// ※先物・オプション銘柄の場合のみ
	TradeStart *int32 `json:"TradeStart"`
	// 取引終了日
	// ※先物・オプション銘柄の場合のみ
	TradeEnd *int32 `json:"TradeEnd"`
	// 権利行使価格
	// ※オプション銘柄の場合のみ
	StrikePrice *float64 `json:"StrikePrice"`
	// プット/コール区分
	// ※オプション銘柄の場合のみ
	// |定義値|説明  |
	// |------|------|
	// |1     |プット|
	// |2     |コール|
	PutOrCall *SymbolSuccessPutOrCall `json:"PutOrCall"`
	// 清算値
	// ※先物銘柄の場合のみ
	ClearingPrice *float64 `json:"ClearingPrice"`
}

// 市場コード
// ※株式・先物・オプション銘柄の場合のみ
// |定義値|説明  |
// |------|------|
// |1     |東証  |
// |3     |名証  |
// |5     |福証  |
// |6     |札証  |
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type SymbolSuccessExchange int32

const (
	// |1|東証|
	SymbolSuccessExchange東証 SymbolSuccessExchange = 1
	// |3|名証|
	SymbolSuccessExchange名証 SymbolSuccessExchange = 3
	// |5|福証|
	SymbolSuccessExchange福証 SymbolSuccessExchange = 5
	// |6|札証|
	SymbolSuccessExchange札証 SymbolSuccessExchange = 6
	// |2|日通し|
	SymbolSuccessExchange日通し SymbolSuccessExchange = 2
	// |23|日中|
	SymbolSuccessExchange日中 SymbolSuccessExchange = 23
	// |24|夜間|
	SymbolSuccessExchange夜間 SymbolSuccessExchange = 24
)

// P returns pointer of SymbolSuccessExchange.
func (e SymbolSuccessExchange) P() *SymbolSuccessExchange {
	v := e
	return &v
}

// 業種コード名
// ※株式銘柄の場合のみ
// |定義値|説明                |
// |------|--------------------|
// |0050  |水産・農林業        |
// |1050  |鉱業                |
// |2050  |建設業              |
// |3050  |食料品              |
// |3100  |繊維製品            |
// |3150  |パルプ・紙          |
// |3200  |化学                |
// |3250  |医薬品              |
// |3300  |石油・石炭製品      |
// |3350  |ゴム製品            |
// |3400  |ガラス・土石製品    |
// |3450  |鉄鋼                |
// |3500  |非鉄金属            |
// |3550  |金属製品            |
// |3600  |機械                |
// |3650  |電気機器            |
// |3700  |輸送用機器          |
// |3750  |精密機器            |
// |3800  |その他製品          |
// |4050  |電気・ガス業        |
// |5050  |陸運業              |
// |5100  |海運業              |
// |5150  |空運業              |
// |5200  |倉庫・運輸関連業    |
// |5250  |情報・通信業        |
// |6050  |卸売業              |
// |6100  |小売業              |
// |7050  |銀行業              |
// |7100  |証券、商品先物取引業|
// |7150  |保険業              |
// |7200  |その他金融業        |
// |8050  |不動産業            |
// |9050  |サービス業          |
// |9999  |その他              |
type SymbolSuccessBisCategory string

const (
	// |0050|水産・農林業|
	SymbolSuccessBisCategory水産_農林業 SymbolSuccessBisCategory = "0050"
	// |1050|鉱業|
	SymbolSuccessBisCategory鉱業 SymbolSuccessBisCategory = "1050"
	// |2050|建設業|
	SymbolSuccessBisCategory建設業 SymbolSuccessBisCategory = "2050"
	// |3050|食料品|
	SymbolSuccessBisCategory食料品 SymbolSuccessBisCategory = "3050"
	// |3100|繊維製品|
	SymbolSuccessBisCategory繊維製品 SymbolSuccessBisCategory = "3100"
	// |3150|パルプ・紙|
	SymbolSuccessBisCategoryパルプ_紙 SymbolSuccessBisCategory = "3150"
	// |3200|化学|
	SymbolSuccessBisCategory化学 SymbolSuccessBisCategory = "3200"
	// |3250|医薬品|
	SymbolSuccessBisCategory医薬品 SymbolSuccessBisCategory = "3250"
	// |3300|石油・石炭製品|
	SymbolSuccessBisCategory石油_石炭製品 SymbolSuccessBisCategory = "3300"
	// |3350|ゴム製品|
	SymbolSuccessBisCategoryゴム製品 SymbolSuccessBisCategory = "3350"
	// |3400|ガラス・土石製品|
	SymbolSuccessBisCategoryガラス_土石製品 SymbolSuccessBisCategory = "3400"
	// |3450|鉄鋼|
	SymbolSuccessBisCategory鉄鋼 SymbolSuccessBisCategory = "3450"
	// |3500|非鉄金属|
	SymbolSuccessBisCategory非鉄金属 SymbolSuccessBisCategory = "3500"
	// |3550|金属製品|
	SymbolSuccessBisCategory金属製品 SymbolSuccessBisCategory = "3550"
	// |3600|機械|
	SymbolSuccessBisCategory機械 SymbolSuccessBisCategory = "3600"
	// |3650|電気機器|
	SymbolSuccessBisCategory電気機器 SymbolSuccessBisCategory = "3650"
	// |3700|輸送用機器|
	SymbolSuccessBisCategory輸送用機器 SymbolSuccessBisCategory = "3700"
	// |3750|精密機器|
	SymbolSuccessBisCategory精密機器 SymbolSuccessBisCategory = "3750"
	// |3800|その他製品|
	SymbolSuccessBisCategoryその他製品 SymbolSuccessBisCategory = "3800"
	// |4050|電気・ガス業|
	SymbolSuccessBisCategory電気_ガス業 SymbolSuccessBisCategory = "4050"
	// |5050|陸運業|
	SymbolSuccessBisCategory陸運業 SymbolSuccessBisCategory = "5050"
	// |5100|海運業|
	SymbolSuccessBisCategory海運業 SymbolSuccessBisCategory = "5100"
	// |5150|空運業|
	SymbolSuccessBisCategory空運業 SymbolSuccessBisCategory = "5150"
	// |5200|倉庫・運輸関連業|
	SymbolSuccessBisCategory倉庫_運輸関連業 SymbolSuccessBisCategory = "5200"
	// |5250|情報・通信業|
	SymbolSuccessBisCategory情報_通信業 SymbolSuccessBisCategory = "5250"
	// |6050|卸売業|
	SymbolSuccessBisCategory卸売業 SymbolSuccessBisCategory = "6050"
	// |6100|小売業|
	SymbolSuccessBisCategory小売業 SymbolSuccessBisCategory = "6100"
	// |7050|銀行業|
	SymbolSuccessBisCategory銀行業 SymbolSuccessBisCategory = "7050"
	// |7100|証券、商品先物取引業|
	SymbolSuccessBisCategory証券_商品先物取引業 SymbolSuccessBisCategory = "7100"
	// |7150|保険業|
	SymbolSuccessBisCategory保険業 SymbolSuccessBisCategory = "7150"
	// |7200|その他金融業|
	SymbolSuccessBisCategoryその他金融業 SymbolSuccessBisCategory = "7200"
	// |8050|不動産業|
	SymbolSuccessBisCategory不動産業 SymbolSuccessBisCategory = "8050"
	// |9050|サービス業|
	SymbolSuccessBisCategoryサービス業 SymbolSuccessBisCategory = "9050"
	// |9999|その他|
	SymbolSuccessBisCategoryその他 SymbolSuccessBisCategory = "9999"
)

// P returns pointer of SymbolSuccessBisCategory.
func (e SymbolSuccessBisCategory) P() *SymbolSuccessBisCategory {
	v := e
	return &v
}

// 呼値グループ
// ※株式・先物・オプション銘柄の場合のみ
// |呼値コード|値段の水準    |呼値単位|
// |----------|--------------|--------|
// |10000     |3000円以下    |1       |
// |10000     |5000円以下    |5       |
// |10000     |30000円以下   |10      |
// |10000     |50000円以下   |50      |
// |10000     |300000円以下  |100     |
// |10000     |500000円以下  |500     |
// |10000     |3000000円以下 |1000    |
// |10000     |5000000円以下 |5000    |
// |10000     |30000000円以下|10000   |
// |10000     |50000000円以下|50000   |
// |10000     |50000000円超  |100000  |
// |10003     |1000円以下    |0.1     |
// |10003     |3000円以下    |0.5     |
// |10003     |10000円以下   |1       |
// |10003     |30000円以下   |5       |
// |10003     |100000円以下  |10      |
// |10003     |300000円以下  |50      |
// |10003     |1000000円以下 |100     |
// |10003     |3000000円以下 |500     |
// |10003     |10000000円以下|1000    |
// |10003     |30000000円以下|5000    |
// |10003     |50000000円以下|10000   |
// |10003     |50000000円超  |10000   |
// |10118     |-             |10      |
// |10119     |-             |5       |
// |10318     |100円以下     |1       |
// |10318     |1000円以下    |5       |
// |10318     |1000円超      |10      |
// |10706     |-             |0.25    |
// |10718     |-             |0.5     |
// |12122     |-             |5       |
// |14473     |-             |1       |
// |14515     |-             |0.05    |
// |15411     |-             |1       |
// |15569     |-             |0.5     |
// |17163     |-             |0.5     |
type SymbolSuccessPriceRangeGroup string

const (
	SymbolSuccessPriceRangeGroup10000 SymbolSuccessPriceRangeGroup = "10000"
	SymbolSuccessPriceRangeGroup10003 SymbolSuccessPriceRangeGroup = "10003"
	SymbolSuccessPriceRangeGroup10118 SymbolSuccessPriceRangeGroup = "10118"
	SymbolSuccessPriceRangeGroup10119 SymbolSuccessPriceRangeGroup = "10119"
	SymbolSuccessPriceRangeGroup10318 SymbolSuccessPriceRangeGroup = "10318"
	SymbolSuccessPriceRangeGroup10706 SymbolSuccessPriceRangeGroup = "10706"
	SymbolSuccessPriceRangeGroup10718 SymbolSuccessPriceRangeGroup = "10718"
	SymbolSuccessPriceRangeGroup12122 SymbolSuccessPriceRangeGroup = "12122"
	SymbolSuccessPriceRangeGroup14473 SymbolSuccessPriceRangeGroup = "14473"
	SymbolSuccessPriceRangeGroup14515 SymbolSuccessPriceRangeGroup = "14515"
	SymbolSuccessPriceRangeGroup15411 SymbolSuccessPriceRangeGroup = "15411"
	SymbolSuccessPriceRangeGroup15569 SymbolSuccessPriceRangeGroup = "15569"
	SymbolSuccessPriceRangeGroup17163 SymbolSuccessPriceRangeGroup = "17163"
)

// P returns pointer of SymbolSuccessPriceRangeGroup.
func (e SymbolSuccessPriceRangeGroup) P() *SymbolSuccessPriceRangeGroup {
	v := e
	return &v
}

// 原資産コード
// ※先物・オプション銘柄の場合のみ
// |定義値      |説明        |
// |------------|------------|
// |NK225       |日経225     |
// |NK300       |日経300     |
// |MOTHERS     |東証マザーズ|
// |JPX400      |JPX日経400  |
// |TOPIX       |TOPIX       |
// |NKVI        |日経平均VI  |
// |DJIA        |NYダウ      |
// |TSEREITINDEX|東証REIT指数|
// |TOPIXCORE30 |TOPIX Core30|
type SymbolSuccessUnderlyer string

const (
	// |NK225|日経225|
	SymbolSuccessUnderlyer日経225 SymbolSuccessUnderlyer = "NK225"
	// |NK300|日経300|
	SymbolSuccessUnderlyer日経300 SymbolSuccessUnderlyer = "NK300"
	// |MOTHERS|東証マザーズ|
	SymbolSuccessUnderlyer東証マザーズ SymbolSuccessUnderlyer = "MOTHERS"
	// |JPX400|JPX日経400|
	SymbolSuccessUnderlyerJPX日経400 SymbolSuccessUnderlyer = "JPX400"
	// |TOPIX|TOPIX|
	SymbolSuccessUnderlyerTOPIX SymbolSuccessUnderlyer = "TOPIX"
	// |NKVI|日経平均VI|
	SymbolSuccessUnderlyer日経平均VI SymbolSuccessUnderlyer = "NKVI"
	// |DJIA|NYダウ|
	SymbolSuccessUnderlyerNYダウ SymbolSuccessUnderlyer = "DJIA"
	// |TSEREITINDEX|東証REIT指数|
	SymbolSuccessUnderlyer東証REIT指数 SymbolSuccessUnderlyer = "TSEREITINDEX"
	// |TOPIXCORE30|TOPIX Core30|
	SymbolSuccessUnderlyerTOPIX_Core30 SymbolSuccessUnderlyer = "TOPIXCORE30"
)

// P returns pointer of SymbolSuccessUnderlyer.
func (e SymbolSuccessUnderlyer) P() *SymbolSuccessUnderlyer {
	v := e
	return &v
}

// プット/コール区分
// ※オプション銘柄の場合のみ
// |定義値|説明  |
// |------|------|
// |1     |プット|
// |2     |コール|
type SymbolSuccessPutOrCall int32

const (
	// |1|プット|
	SymbolSuccessPutOrCallプット SymbolSuccessPutOrCall = 1
	// |2|コール|
	SymbolSuccessPutOrCallコール SymbolSuccessPutOrCall = 2
)

// P returns pointer of SymbolSuccessPutOrCall.
func (e SymbolSuccessPutOrCall) P() *SymbolSuccessPutOrCall {
	v := e
	return &v
}

// OrdersSuccessItem is definition of OrdersSuccessItem.
type OrdersSuccessItem struct {
	// 注文番号
	ID *string `json:"ID"`
	// 状態
	// |定義値|説明                                              |
	// |------|--------------------------------------------------|
	// |1     |待機（発注待機）                                  |
	// |2     |処理中（発注送信中）                              |
	// |3     |処理済（発注済・訂正済）                          |
	// |4     |訂正取消送信中                                    |
	// |5     |終了（発注エラー・取消済・全約定・失効・期限切れ）|
	State *OrdersSuccessItemState `json:"State"`
	// 注文状態
	// |定義値|説明                                              |
	// |------|--------------------------------------------------|
	// |1     |待機（発注待機）                                  |
	// |2     |処理中（発注送信中）                              |
	// |3     |処理済（発注済・訂正済）                          |
	// |4     |訂正取消送信中                                    |
	// |5     |終了（発注エラー・取消済・全約定・失効・期限切れ）|
	OrderState *OrdersSuccessItemOrderState `json:"OrderState"`
	// 執行条件
	// |定義値|説明    |
	// |------|--------|
	// |1     |ザラバ  |
	// |2     |寄り    |
	// |3     |引け    |
	// |4     |不成    |
	// |5     |対当指値|
	// |6     |IOC     |
	OrdType *OrdersSuccessItemOrdType `json:"OrdType"`
	// 受注日時
	RecvTime *string `json:"RecvTime"`
	// 銘柄コード
	Symbol *string `json:"Symbol"`
	// 銘柄名
	SymbolName *string `json:"SymbolName"`
	// 市場コード
	// |定義値|説明  |
	// |------|------|
	// |1     |東証  |
	// |3     |名証  |
	// |5     |福証  |
	// |6     |札証  |
	// |9     |SOR   |
	// |2     |日通し|
	// |23    |日中  |
	// |24    |夜間  |
	Exchange *OrdersSuccessItemExchange `json:"Exchange"`
	// 市場名
	ExchangeName *string `json:"ExchangeName"`
	// 有効期間条件
	// ※先物・オプション銘柄の場合のみ
	// |定義値|説明|
	// |------|----|
	// |1     |FAS |
	// |2     |FAK |
	// |3     |FOK |
	TimeInForce *OrdersSuccessItemTimeInForce `json:"TimeInForce"`
	// 値段
	Price *float64 `json:"Price"`
	// 発注数量
	OrderQty *float64 `json:"OrderQty"`
	// 約定数量
	CumQty *float64 `json:"CumQty"`
	// 売買区分
	// |定義値|説明|
	// |------|----|
	// |1     |売  |
	// |2     |買  |
	Side *OrdersSuccessItemSide `json:"Side"`
	// 取引区分
	// |定義値|説明|
	// |------|----|
	// |2     |新規|
	// |3     |返済|
	CashMargin *OrdersSuccessItemCashMargin `json:"CashMargin"`
	// 口座種別
	// |定義値|説明|
	// |------|----|
	// |2     |一般|
	// |4     |特定|
	// |12    |法人|
	AccountType *OrdersSuccessItemAccountType `json:"AccountType"`
	// 受渡区分
	// |定義値|説明    |
	// |------|--------|
	// |1     |自動振替|
	// |2     |お預り金|
	DelivType *OrdersSuccessItemDelivType `json:"DelivType"`
	// 注文有効期限
	// yyyyMMdd形式
	ExpireDay *int32 `json:"ExpireDay"`
	// 信用取引区分
	// |定義値|説明            |
	// |------|----------------|
	// |1     |制度信用        |
	// |2     |一般信用        |
	// |3     |一般信用（売短）|
	MarginTradeType *OrdersSuccessItemMarginTradeType `json:"MarginTradeType"`
	// 注文詳細
	Details []DetailsItem `json:"Details"`
}

// 状態
// |定義値|説明                                              |
// |------|--------------------------------------------------|
// |1     |待機（発注待機）                                  |
// |2     |処理中（発注送信中）                              |
// |3     |処理済（発注済・訂正済）                          |
// |4     |訂正取消送信中                                    |
// |5     |終了（発注エラー・取消済・全約定・失効・期限切れ）|
type OrdersSuccessItemState int32

const (
	// |1|待機（発注待機）|
	OrdersSuccessItemState待機_発注待機 OrdersSuccessItemState = 1
	// |2|処理中（発注送信中）|
	OrdersSuccessItemState処理中_発注送信中 OrdersSuccessItemState = 2
	// |3|処理済（発注済・訂正済）|
	OrdersSuccessItemState処理済_発注済_訂正済 OrdersSuccessItemState = 3
	// |4|訂正取消送信中|
	OrdersSuccessItemState訂正取消送信中 OrdersSuccessItemState = 4
	// |5|終了（発注エラー・取消済・全約定・失効・期限切れ）|
	OrdersSuccessItemState終了_発注エラー_取消済_全約定_失効_期限切れ OrdersSuccessItemState = 5
)

// P returns pointer of OrdersSuccessItemState.
func (e OrdersSuccessItemState) P() *OrdersSuccessItemState {
	v := e
	return &v
}

// 注文状態
// |定義値|説明                                              |
// |------|--------------------------------------------------|
// |1     |待機（発注待機）                                  |
// |2     |処理中（発注送信中）                              |
// |3     |処理済（発注済・訂正済）                          |
// |4     |訂正取消送信中                                    |
// |5     |終了（発注エラー・取消済・全約定・失効・期限切れ）|
type OrdersSuccessItemOrderState int32

const (
	// |1|待機（発注待機）|
	OrdersSuccessItemOrderState待機_発注待機 OrdersSuccessItemOrderState = 1
	// |2|処理中（発注送信中）|
	OrdersSuccessItemOrderState処理中_発注送信中 OrdersSuccessItemOrderState = 2
	// |3|処理済（発注済・訂正済）|
	OrdersSuccessItemOrderState処理済_発注済_訂正済 OrdersSuccessItemOrderState = 3
	// |4|訂正取消送信中|
	OrdersSuccessItemOrderState訂正取消送信中 OrdersSuccessItemOrderState = 4
	// |5|終了（発注エラー・取消済・全約定・失効・期限切れ）|
	OrdersSuccessItemOrderState終了_発注エラー_取消済_全約定_失効_期限切れ OrdersSuccessItemOrderState = 5
)

// P returns pointer of OrdersSuccessItemOrderState.
func (e OrdersSuccessItemOrderState) P() *OrdersSuccessItemOrderState {
	v := e
	return &v
}

// 執行条件
// |定義値|説明    |
// |------|--------|
// |1     |ザラバ  |
// |2     |寄り    |
// |3     |引け    |
// |4     |不成    |
// |5     |対当指値|
// |6     |IOC     |
type OrdersSuccessItemOrdType int32

const (
	// |1|ザラバ|
	OrdersSuccessItemOrdTypeザラバ OrdersSuccessItemOrdType = 1
	// |2|寄り|
	OrdersSuccessItemOrdType寄り OrdersSuccessItemOrdType = 2
	// |3|引け|
	OrdersSuccessItemOrdType引け OrdersSuccessItemOrdType = 3
	// |4|不成|
	OrdersSuccessItemOrdType不成 OrdersSuccessItemOrdType = 4
	// |5|対当指値|
	OrdersSuccessItemOrdType対当指値 OrdersSuccessItemOrdType = 5
	// |6|IOC|
	OrdersSuccessItemOrdTypeIOC OrdersSuccessItemOrdType = 6
)

// P returns pointer of OrdersSuccessItemOrdType.
func (e OrdersSuccessItemOrdType) P() *OrdersSuccessItemOrdType {
	v := e
	return &v
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |1     |東証  |
// |3     |名証  |
// |5     |福証  |
// |6     |札証  |
// |9     |SOR   |
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type OrdersSuccessItemExchange int32

const (
	// |1|東証|
	OrdersSuccessItemExchange東証 OrdersSuccessItemExchange = 1
	// |3|名証|
	OrdersSuccessItemExchange名証 OrdersSuccessItemExchange = 3
	// |5|福証|
	OrdersSuccessItemExchange福証 OrdersSuccessItemExchange = 5
	// |6|札証|
	OrdersSuccessItemExchange札証 OrdersSuccessItemExchange = 6
	// |9|SOR|
	OrdersSuccessItemExchangeSOR OrdersSuccessItemExchange = 9
	// |2|日通し|
	OrdersSuccessItemExchange日通し OrdersSuccessItemExchange = 2
	// |23|日中|
	OrdersSuccessItemExchange日中 OrdersSuccessItemExchange = 23
	// |24|夜間|
	OrdersSuccessItemExchange夜間 OrdersSuccessItemExchange = 24
)

// P returns pointer of OrdersSuccessItemExchange.
func (e OrdersSuccessItemExchange) P() *OrdersSuccessItemExchange {
	v := e
	return &v
}

// 有効期間条件
// ※先物・オプション銘柄の場合のみ
// |定義値|説明|
// |------|----|
// |1     |FAS |
// |2     |FAK |
// |3     |FOK |
type OrdersSuccessItemTimeInForce int32

const (
	// |1|FAS|
	OrdersSuccessItemTimeInForceFAS OrdersSuccessItemTimeInForce = 1
	// |2|FAK|
	OrdersSuccessItemTimeInForceFAK OrdersSuccessItemTimeInForce = 2
	// |3|FOK|
	OrdersSuccessItemTimeInForceFOK OrdersSuccessItemTimeInForce = 3
)

// P returns pointer of OrdersSuccessItemTimeInForce.
func (e OrdersSuccessItemTimeInForce) P() *OrdersSuccessItemTimeInForce {
	v := e
	return &v
}

// 売買区分
// |定義値|説明|
// |------|----|
// |1     |売  |
// |2     |買  |
type OrdersSuccessItemSide string

const (
	// |1|売|
	OrdersSuccessItemSide売 OrdersSuccessItemSide = "1"
	// |2|買|
	OrdersSuccessItemSide買 OrdersSuccessItemSide = "2"
)

// P returns pointer of OrdersSuccessItemSide.
func (e OrdersSuccessItemSide) P() *OrdersSuccessItemSide {
	v := e
	return &v
}

// 取引区分
// |定義値|説明|
// |------|----|
// |2     |新規|
// |3     |返済|
type OrdersSuccessItemCashMargin int32

const (
	// |2|新規|
	OrdersSuccessItemCashMargin新規 OrdersSuccessItemCashMargin = 2
	// |3|返済|
	OrdersSuccessItemCashMargin返済 OrdersSuccessItemCashMargin = 3
)

// P returns pointer of OrdersSuccessItemCashMargin.
func (e OrdersSuccessItemCashMargin) P() *OrdersSuccessItemCashMargin {
	v := e
	return &v
}

// 口座種別
// |定義値|説明|
// |------|----|
// |2     |一般|
// |4     |特定|
// |12    |法人|
type OrdersSuccessItemAccountType int32

const (
	// |2|一般|
	OrdersSuccessItemAccountType一般 OrdersSuccessItemAccountType = 2
	// |4|特定|
	OrdersSuccessItemAccountType特定 OrdersSuccessItemAccountType = 4
	// |12|法人|
	OrdersSuccessItemAccountType法人 OrdersSuccessItemAccountType = 12
)

// P returns pointer of OrdersSuccessItemAccountType.
func (e OrdersSuccessItemAccountType) P() *OrdersSuccessItemAccountType {
	v := e
	return &v
}

// 受渡区分
// |定義値|説明    |
// |------|--------|
// |1     |自動振替|
// |2     |お預り金|
type OrdersSuccessItemDelivType int32

const (
	// |1|自動振替|
	OrdersSuccessItemDelivType自動振替 OrdersSuccessItemDelivType = 1
	// |2|お預り金|
	OrdersSuccessItemDelivTypeお預り金 OrdersSuccessItemDelivType = 2
)

// P returns pointer of OrdersSuccessItemDelivType.
func (e OrdersSuccessItemDelivType) P() *OrdersSuccessItemDelivType {
	v := e
	return &v
}

// 信用取引区分
// |定義値|説明            |
// |------|----------------|
// |1     |制度信用        |
// |2     |一般信用        |
// |3     |一般信用（売短）|
type OrdersSuccessItemMarginTradeType int32

const (
	// |1|制度信用|
	OrdersSuccessItemMarginTradeType制度信用 OrdersSuccessItemMarginTradeType = 1
	// |2|一般信用|
	OrdersSuccessItemMarginTradeType一般信用 OrdersSuccessItemMarginTradeType = 2
	// |3|一般信用（売短）|
	OrdersSuccessItemMarginTradeType一般信用_売短 OrdersSuccessItemMarginTradeType = 3
)

// P returns pointer of OrdersSuccessItemMarginTradeType.
func (e OrdersSuccessItemMarginTradeType) P() *OrdersSuccessItemMarginTradeType {
	v := e
	return &v
}

// DetailsItem is definition of DetailsItem.
type DetailsItem struct {
	// ※注文明細レコードの生成順序です。
	// ※通番であるとは限りませんが、大小による順序は保たれています。
	SeqNum *int32 `json:"SeqNum"`
	// 注文詳細番号
	ID *string `json:"ID"`
	// 明細種別
	// |定義値|説明    |
	// |------|--------|
	// |1     |受付    |
	// |2     |繰越    |
	// |3     |期限切れ|
	// |4     |発注    |
	// |5     |訂正    |
	// |6     |取消    |
	// |7     |失効    |
	// |8     |約定    |
	RecType *DetailsItemRecType `json:"RecType"`
	// 取引所番号
	ExchangeID *string `json:"ExchangeID"`
	// 状態
	// |定義値|説明                                              |
	// |------|--------------------------------------------------|
	// |1     |待機（発注待機）                                  |
	// |2     |処理中（発注送信中・訂正送信中・取消送信中）      |
	// |3     |処理済（発注済・訂正済・取消済・全約定・期限切れ）|
	// |4     |エラー                                            |
	// |5     |削除済み                                          |
	State *DetailsItemState `json:"State"`
	// 処理時刻
	TransactTime *string `json:"TransactTime"`
	// 執行条件
	// |定義値|説明    |
	// |------|--------|
	// |1     |ザラバ  |
	// |2     |寄り    |
	// |3     |引け    |
	// |4     |不成    |
	// |5     |対当指値|
	// |6     |IOC     |
	OrdType *DetailsItemOrdType `json:"OrdType"`
	// 値段
	Price *float64 `json:"Price"`
	// 数量
	Qty *float64 `json:"Qty"`
	// 約定番号
	ExecutionID *string `json:"ExecutionID"`
	// 約定日時
	ExecutionDay *string `json:"ExecutionDay"`
	// 受渡日
	DelivDay *int32 `json:"DelivDay"`
	// 手数料
	// ※注文詳細の明細種別が約定（RecType=8)の場合に設定。
	Commission *float64 `json:"Commission"`
	// 手数料消費税
	// ※明細種別は約定（RecType=8）の場合にのみ表示されます。
	CommissionTax *float64 `json:"CommissionTax"`
}

// 明細種別
// |定義値|説明    |
// |------|--------|
// |1     |受付    |
// |2     |繰越    |
// |3     |期限切れ|
// |4     |発注    |
// |5     |訂正    |
// |6     |取消    |
// |7     |失効    |
// |8     |約定    |
type DetailsItemRecType int32

const (
	// |1|受付|
	DetailsItemRecType受付 DetailsItemRecType = 1
	// |2|繰越|
	DetailsItemRecType繰越 DetailsItemRecType = 2
	// |3|期限切れ|
	DetailsItemRecType期限切れ DetailsItemRecType = 3
	// |4|発注|
	DetailsItemRecType発注 DetailsItemRecType = 4
	// |5|訂正|
	DetailsItemRecType訂正 DetailsItemRecType = 5
	// |6|取消|
	DetailsItemRecType取消 DetailsItemRecType = 6
	// |7|失効|
	DetailsItemRecType失効 DetailsItemRecType = 7
	// |8|約定|
	DetailsItemRecType約定 DetailsItemRecType = 8
)

// P returns pointer of DetailsItemRecType.
func (e DetailsItemRecType) P() *DetailsItemRecType {
	v := e
	return &v
}

// 状態
// |定義値|説明                                              |
// |------|--------------------------------------------------|
// |1     |待機（発注待機）                                  |
// |2     |処理中（発注送信中・訂正送信中・取消送信中）      |
// |3     |処理済（発注済・訂正済・取消済・全約定・期限切れ）|
// |4     |エラー                                            |
// |5     |削除済み                                          |
type DetailsItemState int32

const (
	// |1|待機（発注待機）|
	DetailsItemState待機_発注待機 DetailsItemState = 1
	// |2|処理中（発注送信中・訂正送信中・取消送信中）|
	DetailsItemState処理中_発注送信中_訂正送信中_取消送信中 DetailsItemState = 2
	// |3|処理済（発注済・訂正済・取消済・全約定・期限切れ）|
	DetailsItemState処理済_発注済_訂正済_取消済_全約定_期限切れ DetailsItemState = 3
	// |4|エラー|
	DetailsItemStateエラー DetailsItemState = 4
	// |5|削除済み|
	DetailsItemState削除済み DetailsItemState = 5
)

// P returns pointer of DetailsItemState.
func (e DetailsItemState) P() *DetailsItemState {
	v := e
	return &v
}

// 執行条件
// |定義値|説明    |
// |------|--------|
// |1     |ザラバ  |
// |2     |寄り    |
// |3     |引け    |
// |4     |不成    |
// |5     |対当指値|
// |6     |IOC     |
type DetailsItemOrdType int32

const (
	// |1|ザラバ|
	DetailsItemOrdTypeザラバ DetailsItemOrdType = 1
	// |2|寄り|
	DetailsItemOrdType寄り DetailsItemOrdType = 2
	// |3|引け|
	DetailsItemOrdType引け DetailsItemOrdType = 3
	// |4|不成|
	DetailsItemOrdType不成 DetailsItemOrdType = 4
	// |5|対当指値|
	DetailsItemOrdType対当指値 DetailsItemOrdType = 5
	// |6|IOC|
	DetailsItemOrdTypeIOC DetailsItemOrdType = 6
)

// P returns pointer of DetailsItemOrdType.
func (e DetailsItemOrdType) P() *DetailsItemOrdType {
	v := e
	return &v
}

// PositionsSuccessItem is definition of PositionsSuccessItem.
type PositionsSuccessItem struct {
	// 約定番号
	// ※現物取引では、nullが返ります。
	ExecutionID *string `json:"ExecutionID"`
	// 口座種別
	// |定義値|説明|
	// |------|----|
	// |2     |一般|
	// |4     |特定|
	// |12    |法人|
	AccountType *PositionsSuccessItemAccountType `json:"AccountType"`
	// 銘柄コード
	Symbol *string `json:"Symbol"`
	// 銘柄名
	SymbolName *string `json:"SymbolName"`
	// 市場コード
	// |定義値|説明  |
	// |------|------|
	// |1     |東証  |
	// |3     |名証  |
	// |5     |福証  |
	// |6     |札証  |
	// |2     |日通し|
	// |23    |日中  |
	// |24    |夜間  |
	Exchange *PositionsSuccessItemExchange `json:"Exchange"`
	// 市場名
	ExchangeName *string `json:"ExchangeName"`
	// 銘柄種別
	// ※先物・オプション銘柄の場合のみ
	SecurityType *int32 `json:"SecurityType"`
	// 約定日（建玉日）
	// ※信用・先物・オプションの場合のみ
	// ※現物取引では、nullが返ります。
	ExecutionDay *int32 `json:"ExecutionDay"`
	// 値段
	Price *float64 `json:"Price"`
	// 残数量
	LeavesQty *float64 `json:"LeavesQty"`
	// 拘束数量（保有数量）
	HoldQty *float64 `json:"HoldQty"`
	// 売買区分
	// |定義値|説明|
	// |------|----|
	// |1     |売  |
	// |2     |買  |
	Side *PositionsSuccessItemSide `json:"Side"`
	// 諸経費
	// ※信用・先物・オプションの場合のみ
	Expenses *float64 `json:"Expenses"`
	// 手数料
	// ※信用・先物・オプションの場合のみ
	Commission *float64 `json:"Commission"`
	// 手数料消費税
	// ※信用・先物・オプションの場合のみ
	CommissionTax *float64 `json:"CommissionTax"`
	// 返済期日
	// ※信用・先物・オプションの場合のみ
	ExpireDay *int32 `json:"ExpireDay"`
	// 信用取引区分
	// ※信用の場合のみ
	// |定義値|説明            |
	// |------|----------------|
	// |1     |制度信用        |
	// |2     |一般信用        |
	// |3     |一般信用（売短）|
	MarginTradeType *PositionsSuccessItemMarginTradeType `json:"MarginTradeType"`
	// 現在値
	CurrentPrice *float64 `json:"CurrentPrice"`
	// 評価金額
	Valuation *float64 `json:"Valuation"`
	// 評価損益額
	ProfitLoss *float64 `json:"ProfitLoss"`
	// 評価損益率
	ProfitLossRate *float64 `json:"ProfitLossRate"`
}

// 口座種別
// |定義値|説明|
// |------|----|
// |2     |一般|
// |4     |特定|
// |12    |法人|
type PositionsSuccessItemAccountType int32

const (
	// |2|一般|
	PositionsSuccessItemAccountType一般 PositionsSuccessItemAccountType = 2
	// |4|特定|
	PositionsSuccessItemAccountType特定 PositionsSuccessItemAccountType = 4
	// |12|法人|
	PositionsSuccessItemAccountType法人 PositionsSuccessItemAccountType = 12
)

// P returns pointer of PositionsSuccessItemAccountType.
func (e PositionsSuccessItemAccountType) P() *PositionsSuccessItemAccountType {
	v := e
	return &v
}

// 市場コード
// |定義値|説明  |
// |------|------|
// |1     |東証  |
// |3     |名証  |
// |5     |福証  |
// |6     |札証  |
// |2     |日通し|
// |23    |日中  |
// |24    |夜間  |
type PositionsSuccessItemExchange int32

const (
	// |1|東証|
	PositionsSuccessItemExchange東証 PositionsSuccessItemExchange = 1
	// |3|名証|
	PositionsSuccessItemExchange名証 PositionsSuccessItemExchange = 3
	// |5|福証|
	PositionsSuccessItemExchange福証 PositionsSuccessItemExchange = 5
	// |6|札証|
	PositionsSuccessItemExchange札証 PositionsSuccessItemExchange = 6
	// |2|日通し|
	PositionsSuccessItemExchange日通し PositionsSuccessItemExchange = 2
	// |23|日中|
	PositionsSuccessItemExchange日中 PositionsSuccessItemExchange = 23
	// |24|夜間|
	PositionsSuccessItemExchange夜間 PositionsSuccessItemExchange = 24
)

// P returns pointer of PositionsSuccessItemExchange.
func (e PositionsSuccessItemExchange) P() *PositionsSuccessItemExchange {
	v := e
	return &v
}

// 売買区分
// |定義値|説明|
// |------|----|
// |1     |売  |
// |2     |買  |
type PositionsSuccessItemSide string

const (
	// |1|売|
	PositionsSuccessItemSide売 PositionsSuccessItemSide = "1"
	// |2|買|
	PositionsSuccessItemSide買 PositionsSuccessItemSide = "2"
)

// P returns pointer of PositionsSuccessItemSide.
func (e PositionsSuccessItemSide) P() *PositionsSuccessItemSide {
	v := e
	return &v
}

// 信用取引区分
// ※信用の場合のみ
// |定義値|説明            |
// |------|----------------|
// |1     |制度信用        |
// |2     |一般信用        |
// |3     |一般信用（売短）|
type PositionsSuccessItemMarginTradeType int32

const (
	// |1|制度信用|
	PositionsSuccessItemMarginTradeType制度信用 PositionsSuccessItemMarginTradeType = 1
	// |2|一般信用|
	PositionsSuccessItemMarginTradeType一般信用 PositionsSuccessItemMarginTradeType = 2
	// |3|一般信用（売短）|
	PositionsSuccessItemMarginTradeType一般信用_売短 PositionsSuccessItemMarginTradeType = 3
)

// P returns pointer of PositionsSuccessItemMarginTradeType.
func (e PositionsSuccessItemMarginTradeType) P() *PositionsSuccessItemMarginTradeType {
	v := e
	return &v
}

// SymbolNameSuccess is definition of SymbolNameSuccess.
type SymbolNameSuccess struct {
	// 銘柄コード
	Symbol *string `json:"Symbol"`
	// 銘柄名称
	SymbolName *string `json:"SymbolName"`
}

// ErrorResponse is definition of ErrorResponse.
type ErrorResponse struct {
	// エラーコード"
	// |エラーコード|エラーメッセージ                                                               |説明                                                                                                      |
	// |------------|-------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------|
	// |4001001     |内部エラー                                                                     |kabuSログファイルを確認してください。                                                                     |
	// |4001002     |トリガキー生成エラー                                                           |kabuSログファイルを確認してください。                                                                     |
	// |4001003     |エラー：Uターン                                                                |kabuSログファイルを確認してください。                                                                     |
	// |4001004     |トリガ生成エラー                                                               |kabuSログファイルを確認してください。                                                                     |
	// |4001005     |パラメータ変換エラー                                                           |設定したパラメータはkabuステーション「システム設定」「注文１」の設定内容と相違がないかを確認してください。|
	// |4001006     |API実行回数エラー                                                              |                                                                                                          |
	// |4001007     |ログイン認証エラー                                                             |kabuステーションにログインしているかを確認してください。                                                  |
	// |4001008     |API利用不可                                                                    |API利用設定が完了しているかを確認してください。                                                           |
	// |4001009     |APIキー不一致                                                                  |                                                                                                          |
	// |4001010     |クエリ文字列不正                                                               |                                                                                                          |
	// |4001011     |リクエスト文字列不正                                                           |                                                                                                          |
	// |4001012     |リクエスト不正                                                                 |                                                                                                          |
	// |4001013     |トークン取得失敗：kabuステーションがログインしている状態で、APIパスワードが不正|                                                                                                          |
	// |4001014     |許可されていないHTTPメソッド                                                   |                                                                                                          |
	// |4001015     |ContentLength超過                                                              |                                                                                                          |
	// |4001016     |サポートされていないメディアタイプ                                             |                                                                                                          |
	// |4001017     |ログイン認証エラー：kabuSステーション未ログイン状態。                          |                                                                                                          |
	// |4001018     |銘柄が登録できませんでした                                                     |登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。                            |
	// |4001019     |一部の銘柄が登録できませんでした                                               |登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。                            |
	// |4001020     |銘柄が解除できませんでした                                                     |銘柄が登録されているかを確認してください。                                                                |
	// |4001021     |一部の銘柄が解除できませんでした                                               |登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。                            |
	// |4002001     |銘柄が見つからない                                                             |                                                                                                          |
	// |4002002     |執行条件エラー                                                                 |FrontOrderTypeを確認してください。                                                                        |
	// |4002003     |執行条件エラー                                                                 |FrontOrderTypeを確認してください。                                                                        |
	// |4002004     |トリガチェックエラー - 詳細はkabuSログファイルを確認してください               |                                                                                                          |
	// |4002005     |商品エラー                                                                     |                                                                                                          |
	// |4002006     |レジスト数エラー                                                               |登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。                            |
	// |4002007     |パラメータ不正：AccountType - 詳細はkabuSログファイルを確認してください        |                                                                                                          |
	// |4002008     |パラメータ不正：Side - 詳細はkabuSログファイルを確認してください               |                                                                                                          |
	// |4002009     |パラメータ不正：CashMargin - 詳細はkabuSログファイルを確認してください         |                                                                                                          |
	// |4002010     |パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください          |                                                                                                          |
	// |4002011     |パラメータ不正：FundType - 詳細はkabuSログファイルを確認してください           |                                                                                                          |
	// |4002012     |パラメータ不正：FrontOrderType - 詳細はkabuSログファイルを確認してください     |                                                                                                          |
	// |4002013     |パラメータ不正：MarginTradeType - 詳細はkabuSログファイルを確認してください    |                                                                                                          |
	// |4002014     |パラメータ不正：TimeInForce - 詳細はkabuSログファイルを確認してください        |                                                                                                          |
	// |4002015     |パラメータ不正：返済順指定と返済指定は同時に設定できない                       |                                                                                                          |
	// |4002016     |パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください          |                                                                                                          |
	// |4002017     |パラメータ不正：値段指定エラー                                                 |                                                                                                          |
	// |4002018     |パラメータ不正：IOC対象銘柄ではない - 詳細はkabuSログファイルを確認してください|                                                                                                          |
	// |4002021     |取引期日を過ぎた取引であるか、有効な銘柄ではないため取引できません             |                                                                                                          |
	// |4003001     |ワンショット：金額エラー                                                       |                                                                                                          |
	// |4003002     |ワンショット：数量エラー                                                       |                                                                                                          |
	// |4004001     |該当注文なしエラー                                                             |                                                                                                          |
	// |4004002     |取消不可                                                                       |                                                                                                          |
	Code ErrorResponseCode `json:"Code"`
	// エラーメッセージ
	Message string `json:"Message"`
}

// エラーコード"
// |エラーコード|エラーメッセージ                                                               |説明                                                                                                      |
// |------------|-------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------|
// |4001001     |内部エラー                                                                     |kabuSログファイルを確認してください。                                                                     |
// |4001002     |トリガキー生成エラー                                                           |kabuSログファイルを確認してください。                                                                     |
// |4001003     |エラー：Uターン                                                                |kabuSログファイルを確認してください。                                                                     |
// |4001004     |トリガ生成エラー                                                               |kabuSログファイルを確認してください。                                                                     |
// |4001005     |パラメータ変換エラー                                                           |設定したパラメータはkabuステーション「システム設定」「注文１」の設定内容と相違がないかを確認してください。|
// |4001006     |API実行回数エラー                                                              |                                                                                                          |
// |4001007     |ログイン認証エラー                                                             |kabuステーションにログインしているかを確認してください。                                                  |
// |4001008     |API利用不可                                                                    |API利用設定が完了しているかを確認してください。                                                           |
// |4001009     |APIキー不一致                                                                  |                                                                                                          |
// |4001010     |クエリ文字列不正                                                               |                                                                                                          |
// |4001011     |リクエスト文字列不正                                                           |                                                                                                          |
// |4001012     |リクエスト不正                                                                 |                                                                                                          |
// |4001013     |トークン取得失敗：kabuステーションがログインしている状態で、APIパスワードが不正|                                                                                                          |
// |4001014     |許可されていないHTTPメソッド                                                   |                                                                                                          |
// |4001015     |ContentLength超過                                                              |                                                                                                          |
// |4001016     |サポートされていないメディアタイプ                                             |                                                                                                          |
// |4001017     |ログイン認証エラー：kabuSステーション未ログイン状態。                          |                                                                                                          |
// |4001018     |銘柄が登録できませんでした                                                     |登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。                            |
// |4001019     |一部の銘柄が登録できませんでした                                               |登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。                            |
// |4001020     |銘柄が解除できませんでした                                                     |銘柄が登録されているかを確認してください。                                                                |
// |4001021     |一部の銘柄が解除できませんでした                                               |登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。                            |
// |4002001     |銘柄が見つからない                                                             |                                                                                                          |
// |4002002     |執行条件エラー                                                                 |FrontOrderTypeを確認してください。                                                                        |
// |4002003     |執行条件エラー                                                                 |FrontOrderTypeを確認してください。                                                                        |
// |4002004     |トリガチェックエラー - 詳細はkabuSログファイルを確認してください               |                                                                                                          |
// |4002005     |商品エラー                                                                     |                                                                                                          |
// |4002006     |レジスト数エラー                                                               |登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。                            |
// |4002007     |パラメータ不正：AccountType - 詳細はkabuSログファイルを確認してください        |                                                                                                          |
// |4002008     |パラメータ不正：Side - 詳細はkabuSログファイルを確認してください               |                                                                                                          |
// |4002009     |パラメータ不正：CashMargin - 詳細はkabuSログファイルを確認してください         |                                                                                                          |
// |4002010     |パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください          |                                                                                                          |
// |4002011     |パラメータ不正：FundType - 詳細はkabuSログファイルを確認してください           |                                                                                                          |
// |4002012     |パラメータ不正：FrontOrderType - 詳細はkabuSログファイルを確認してください     |                                                                                                          |
// |4002013     |パラメータ不正：MarginTradeType - 詳細はkabuSログファイルを確認してください    |                                                                                                          |
// |4002014     |パラメータ不正：TimeInForce - 詳細はkabuSログファイルを確認してください        |                                                                                                          |
// |4002015     |パラメータ不正：返済順指定と返済指定は同時に設定できない                       |                                                                                                          |
// |4002016     |パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください          |                                                                                                          |
// |4002017     |パラメータ不正：値段指定エラー                                                 |                                                                                                          |
// |4002018     |パラメータ不正：IOC対象銘柄ではない - 詳細はkabuSログファイルを確認してください|                                                                                                          |
// |4002021     |取引期日を過ぎた取引であるか、有効な銘柄ではないため取引できません             |                                                                                                          |
// |4003001     |ワンショット：金額エラー                                                       |                                                                                                          |
// |4003002     |ワンショット：数量エラー                                                       |                                                                                                          |
// |4004001     |該当注文なしエラー                                                             |                                                                                                          |
// |4004002     |取消不可                                                                       |                                                                                                          |
type ErrorResponseCode int32

const (
	// |4001001|内部エラー|kabuSログファイルを確認してください。|
	ErrorResponseCode内部エラー ErrorResponseCode = 4001001
	// |4001002|トリガキー生成エラー|kabuSログファイルを確認してください。|
	ErrorResponseCodeトリガキー生成エラー ErrorResponseCode = 4001002
	// |4001003|エラー：Uターン|kabuSログファイルを確認してください。|
	ErrorResponseCodeエラー_Uターン ErrorResponseCode = 4001003
	// |4001004|トリガ生成エラー|kabuSログファイルを確認してください。|
	ErrorResponseCodeトリガ生成エラー ErrorResponseCode = 4001004
	// |4001005|パラメータ変換エラー|設定したパラメータはkabuステーション「システム設定」「注文１」の設定内容と相違がないかを確認してください。|
	ErrorResponseCodeパラメータ変換エラー ErrorResponseCode = 4001005
	// |4001006|API実行回数エラー||
	ErrorResponseCodeAPI実行回数エラー ErrorResponseCode = 4001006
	// |4001007|ログイン認証エラー|kabuステーションにログインしているかを確認してください。|
	ErrorResponseCodeログイン認証エラー ErrorResponseCode = 4001007
	// |4001008|API利用不可|API利用設定が完了しているかを確認してください。|
	ErrorResponseCodeAPI利用不可 ErrorResponseCode = 4001008
	// |4001009|APIキー不一致||
	ErrorResponseCodeAPIキー不一致 ErrorResponseCode = 4001009
	// |4001010|クエリ文字列不正||
	ErrorResponseCodeクエリ文字列不正 ErrorResponseCode = 4001010
	// |4001011|リクエスト文字列不正||
	ErrorResponseCodeリクエスト文字列不正 ErrorResponseCode = 4001011
	// |4001012|リクエスト不正||
	ErrorResponseCodeリクエスト不正 ErrorResponseCode = 4001012
	// |4001013|トークン取得失敗：kabuステーションがログインしている状態で、APIパスワードが不正||
	ErrorResponseCodeトークン取得失敗_kabuステーションがログインしている状態で_APIパスワードが不正 ErrorResponseCode = 4001013
	// |4001014|許可されていないHTTPメソッド||
	ErrorResponseCode許可されていないHTTPメソッド ErrorResponseCode = 4001014
	// |4001015|ContentLength超過||
	ErrorResponseCodeContentLength超過 ErrorResponseCode = 4001015
	// |4001016|サポートされていないメディアタイプ||
	ErrorResponseCodeサポートされていないメディアタイプ ErrorResponseCode = 4001016
	// |4001017|ログイン認証エラー：kabuSステーション未ログイン状態。||
	ErrorResponseCodeログイン認証エラー_kabuSステーション未ログイン状態 ErrorResponseCode = 4001017
	// |4001018|銘柄が登録できませんでした|登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。|
	ErrorResponseCode銘柄が登録できませんでした ErrorResponseCode = 4001018
	// |4001019|一部の銘柄が登録できませんでした|登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。|
	ErrorResponseCode一部の銘柄が登録できませんでした ErrorResponseCode = 4001019
	// |4001020|銘柄が解除できませんでした|銘柄が登録されているかを確認してください。|
	ErrorResponseCode銘柄が解除できませんでした ErrorResponseCode = 4001020
	// |4001021|一部の銘柄が解除できませんでした|登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。|
	ErrorResponseCode一部の銘柄が解除できませんでした ErrorResponseCode = 4001021
	// |4002001|銘柄が見つからない||
	ErrorResponseCode銘柄が見つからない ErrorResponseCode = 4002001
	// |4002002|執行条件エラー|FrontOrderTypeを確認してください。|
	ErrorResponseCode執行条件エラー_4002002 ErrorResponseCode = 4002002
	// |4002003|執行条件エラー|FrontOrderTypeを確認してください。|
	ErrorResponseCode執行条件エラー_4002003 ErrorResponseCode = 4002003
	// |4002004|トリガチェックエラー - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeトリガチェックエラー ErrorResponseCode = 4002004
	// |4002005|商品エラー||
	ErrorResponseCode商品エラー ErrorResponseCode = 4002005
	// |4002006|レジスト数エラー|登録銘柄上限数（50銘柄）以上の銘柄をリクエストしていないかを確認してください。|
	ErrorResponseCodeレジスト数エラー ErrorResponseCode = 4002006
	// |4002007|パラメータ不正：AccountType - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_AccountType ErrorResponseCode = 4002007
	// |4002008|パラメータ不正：Side - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_Side ErrorResponseCode = 4002008
	// |4002009|パラメータ不正：CashMargin - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_CashMargin ErrorResponseCode = 4002009
	// |4002010|パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_DelivType_4002010 ErrorResponseCode = 4002010
	// |4002011|パラメータ不正：FundType - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_FundType ErrorResponseCode = 4002011
	// |4002012|パラメータ不正：FrontOrderType - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_FrontOrderType ErrorResponseCode = 4002012
	// |4002013|パラメータ不正：MarginTradeType - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_MarginTradeType ErrorResponseCode = 4002013
	// |4002014|パラメータ不正：TimeInForce - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_TimeInForce ErrorResponseCode = 4002014
	// |4002015|パラメータ不正：返済順指定と返済指定は同時に設定できない||
	ErrorResponseCodeパラメータ不正_返済順指定と返済指定は同時に設定できない ErrorResponseCode = 4002015
	// |4002016|パラメータ不正：DelivType - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_DelivType_4002016 ErrorResponseCode = 4002016
	// |4002017|パラメータ不正：値段指定エラー||
	ErrorResponseCodeパラメータ不正_値段指定エラー ErrorResponseCode = 4002017
	// |4002018|パラメータ不正：IOC対象銘柄ではない - 詳細はkabuSログファイルを確認してください||
	ErrorResponseCodeパラメータ不正_IOC対象銘柄ではない ErrorResponseCode = 4002018
	// |4002021|取引期日を過ぎた取引であるか、有効な銘柄ではないため取引できません||
	ErrorResponseCode取引期日を過ぎた取引であるか_有効な銘柄ではないため取引できません ErrorResponseCode = 4002021
	// |4003001|ワンショット：金額エラー||
	ErrorResponseCodeワンショット_金額エラー ErrorResponseCode = 4003001
	// |4003002|ワンショット：数量エラー||
	ErrorResponseCodeワンショット_数量エラー ErrorResponseCode = 4003002
	// |4004001|該当注文なしエラー||
	ErrorResponseCode該当注文なしエラー ErrorResponseCode = 4004001
	// |4004002|取消不可||
	ErrorResponseCode取消不可 ErrorResponseCode = 4004002
)

// P returns pointer of ErrorResponseCode.
func (e ErrorResponseCode) P() *ErrorResponseCode {
	v := e
	return &v
}
